"""INA238 - 85V, 16-Bit, High-Precision Power Monitor With I²C Interface

The INA238 is an ultra-precise digital power monitor with a 16-bit delta-sigma ADC 
specifically designed for current-sensing applications. The device can measure a 
full-scale differential input of ±163.84mV or ±40.96mV across a resistive shunt 
sense element with common-mode voltage support from -0.3V to +85V. The INA238 
reports current, bus voltage, temperature, and power, all while performing the 
needed calculations in the background. Features integrated temperature sensor 
with ±1°C accuracy, wide common-mode range from -0.3V to +85V, and 2.94 MHz 
high-speed I²C interface with 16 pin-selectable addresses.

Author: @@anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.ti.com/lit/ds/symlink/ina238.pdf
"""

load("@stdlib/interfaces.zen", "I2c", "Power")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
I2cAddress = enum("0x40", "0x41", "0x42", "0x43", "0x44", "0x45", "0x46", "0x47", 
                  "0x48", "0x49", "0x4A", "0x4B", "0x4C", "0x4D", "0x4E", "0x4F")
ShuntRange = enum("163.84mV", "40.96mV", "20.48mV", "10.24mV", "5.12mV", "2.56mV")
AlertPullup = enum("1kohms", "2.2kohms", "4.7kohms", "10kohms")

# Configuration
add_decoupling = config("add_decoupling", bool, default = True)
add_input_filtering = config("add_input_filtering", bool, default = True)
add_overvoltage_protection = config("add_overvoltage_protection", bool, default = False)
add_test_points = config("add_test_points", bool, default = False)
add_bus_resistor = config("add_bus_resistor", bool, default = True)

# I2C configuration
i2c_address = config("i2c_address", I2cAddress, default = "0x40")
add_i2c_pullups = config("add_i2c_pullups", bool, default = True)
i2c_pullup_value = config("i2c_pullup_value", str, default = "4.7kohms")

# Alert configuration
add_alert_pullup = config("add_alert_pullup", bool, default = True)
alert_pullup_value = config("alert_pullup_value", AlertPullup, default = "10kohms")

# Determine address pin connections based on selected I2C address
# Address mapping dictionary (INA238 uses same pattern as INA226/INA219)
address_map = {
    I2cAddress("0x40"): ("GND", "GND"),
    I2cAddress("0x41"): ("GND", "VS"),
    I2cAddress("0x42"): ("GND", "SDA"),
    I2cAddress("0x43"): ("GND", "SCL"),
    I2cAddress("0x44"): ("VS", "GND"),
    I2cAddress("0x45"): ("VS", "VS"),
    I2cAddress("0x46"): ("VS", "SDA"),
    I2cAddress("0x47"): ("VS", "SCL"),
    I2cAddress("0x48"): ("SDA", "GND"),
    I2cAddress("0x49"): ("SDA", "VS"),
    I2cAddress("0x4A"): ("SDA", "SDA"),
    I2cAddress("0x4B"): ("SDA", "SCL"),
    I2cAddress("0x4C"): ("SCL", "GND"),
    I2cAddress("0x4D"): ("SCL", "VS"),
    I2cAddress("0x4E"): ("SCL", "SDA"),
    I2cAddress("0x4F"): ("SCL", "SCL"),
}

# Get the pin connections for the selected address
a1_conn, a0_conn = address_map[i2c_address]

# Shunt resistor configuration
shunt_resistance = config("shunt_resistance", str, default = "100mohms")
shunt_range = config("shunt_range", ShuntRange, default = "163.84mV")

# Input filter configuration
if add_input_filtering:
    input_filter_r = config("input_filter_r", str, default = "10ohms")
    input_filter_c = config("input_filter_c", str, default = "100nF")

# Bus voltage divider configuration
if add_bus_resistor:
    bus_series_resistor = config("bus_series_resistor", str, default = "10ohms")

# External IO
VS = io("VS", Power)  # Power supply (2.7-5.5V)
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))

# I2C interface
i2c = io("I2C", I2c)

# Current sensing inputs
VIN_PLUS = io("VIN+", Net)   # Connect to supply side of shunt resistor
VIN_MINUS = io("VIN-", Net)  # Connect to load side of shunt resistor

# Bus voltage monitoring
VBUS = io("VBUS", Net)  # Bus voltage input (0-85V)

# Alert output
ALERT = io("ALERT", Net)  # Alert output, open-drain

# Internal nets
_VIN_PLUS_FILT = Net("VIN_PLUS_FILT") if add_input_filtering else VIN_PLUS
_VIN_MINUS_FILT = Net("VIN_MINUS_FILT") if add_input_filtering else VIN_MINUS
_VBUS_FILT = Net("VBUS_FILT") if add_bus_resistor else VBUS

# Address pin nets
if a1_conn == "VS":
    _A1 = VS.NET
elif a1_conn == "SDA":
    _A1 = i2c.SDA
elif a1_conn == "SCL":
    _A1 = i2c.SCL
else:  # GND
    _A1 = GND

if a0_conn == "VS":
    _A0 = VS.NET
elif a0_conn == "SDA":
    _A0 = i2c.SDA
elif a0_conn == "SCL":
    _A0 = i2c.SCL
else:  # GND
    _A0 = GND

# Main component
Component(
    name = "INA238",
    symbol = Symbol(library = "@kicad-symbols/Sensor_Energy.kicad_sym", name = "INA238"),
    footprint = File("@kicad-footprints/Package_SO.pretty/VSSOP-10_3x3mm_P0.5mm.kicad_mod"),
    pins = {
        "A1": _A1,
        "A0": _A0,
        "~{Alert}": ALERT,
        "SDA": i2c.SDA,
        "SCL": i2c.SCL,
        "VS": VS.NET,
        "GND": GND,
        "Vbus": _VBUS_FILT,
        "Vin-": _VIN_MINUS_FILT,
        "Vin+": _VIN_PLUS_FILT
    },
)

# Power supply decoupling
if add_decoupling:
    # Local ceramic capacitor
    Capacitor(
        name = "C_VS",
        value = "100nF",
        voltage = "10V",
        package = "0402",
        P1 = VS.NET,
        P2 = GND
    )
    
    # Bulk capacitor
    Capacitor(
        name = "C_BULK",
        value = "1uF",
        voltage = "10V",
        package = "0603",
        P1 = VS.NET,
        P2 = GND
    )

# Input filtering
if add_input_filtering:
    # Series resistors for dV/dt protection
    Resistor(
        name = "R_IN_PLUS",
        value = input_filter_r,
        package = "0402",
        P1 = VIN_PLUS,
        P2 = _VIN_PLUS_FILT
    )
    
    Resistor(
        name = "R_IN_MINUS",
        value = input_filter_r,
        package = "0402",
        P1 = VIN_MINUS,
        P2 = _VIN_MINUS_FILT
    )
    
    # Filter capacitors
    Capacitor(
        name = "C_IN_PLUS",
        value = input_filter_c,
        voltage = "100V",
        package = "0402",
        P1 = _VIN_PLUS_FILT,
        P2 = GND
    )
    
    Capacitor(
        name = "C_IN_MINUS",
        value = input_filter_c,
        voltage = "100V",
        package = "0402",
        P1 = _VIN_MINUS_FILT,
        P2 = GND
    )

# Bus voltage protection resistor
if add_bus_resistor:
    Resistor(
        name = "R_VBUS",
        value = bus_series_resistor,
        package = "0402",
        P1 = VBUS,
        P2 = _VBUS_FILT
    )

# Overvoltage protection
if add_overvoltage_protection:
    # TVS diode for bus voltage protection (85V abs max)
    Component(
        name = "D_TVS",
        symbol = Symbol(library = "@kicad-symbols/Diode.kicad_sym", name = "SMAJ75A"),
        footprint = File("@kicad-footprints/Diode_SMD.pretty/D_SOD-123.kicad_mod"),
        pins = {
            "A1": VBUS,
            "A2": GND
        }
    )

# I2C pull-up resistors
if add_i2c_pullups:
    Resistor(
        name = "R_SDA",
        value = i2c_pullup_value,
        package = "0402",
        P1 = i2c.SDA,
        P2 = VS.NET
    )
    
    Resistor(
        name = "R_SCL",
        value = i2c_pullup_value,
        package = "0402",
        P1 = i2c.SCL,
        P2 = VS.NET
    )

# Alert pull-up
if add_alert_pullup:
    alert_pullup_map = {
        AlertPullup("1kohms"): "1kohms",
        AlertPullup("2.2kohms"): "2.2kohms",
        AlertPullup("4.7kohms"): "4.7kohms",
        AlertPullup("10kohms"): "10kohms"
    }
    
    Resistor(
        name = "R_ALERT",
        value = alert_pullup_map[alert_pullup_value],
        package = "0402",
        P1 = ALERT,
        P2 = VS.NET
    )

# External shunt resistor
# Large power resistor for current sensing
Resistor(
    name = "R_SHUNT",
    value = shunt_resistance,
    package = "2512",  # Large SMD package for power handling
    P1 = VIN_PLUS,
    P2 = VIN_MINUS
)

# Test points
if add_test_points:
    TestPoint(
        name = "TP_IN_PLUS",
        variant = "Pad_D1.5mm",
        P1 = VIN_PLUS
    )
    
    TestPoint(
        name = "TP_IN_MINUS",
        variant = "Pad_D1.5mm",
        P1 = VIN_MINUS
    )
    
    TestPoint(
        name = "TP_VBUS",
        variant = "Pad_D1.5mm",
        P1 = VBUS
    )
    
    TestPoint(
        name = "TP_ALERT",
        variant = "Pad_D1.5mm",
        P1 = ALERT
    )
    
    TestPoint(
        name = "TP_VS",
        variant = "Pad_D1.5mm",
        P1 = VS.NET
    )

# Schematic Layout
# pcb:sch INA238 x=100.6000 y=87.9000 rot=0

# Power decoupling
# pcb:sch C_VS.C x=613.6800 y=176.8000 rot=0
# pcb:sch C_BULK.C x=753.3800 y=176.8000 rot=0

# External shunt resistor (current sensing)
# pcb:sch R_SHUNT.R x=-239.7600 y=214.9000 rot=0

# Input filtering components (left side)
# pcb:sch R_IN_PLUS.R x=-138.1600 y=176.8000 rot=270
# pcb:sch R_IN_MINUS.R x=-138.1600 y=253.0000 rot=270
# pcb:sch C_IN_PLUS.C x=-84.8200 y=113.3000 rot=180
# pcb:sch C_IN_MINUS.C x=-84.8200 y=303.8000 rot=0

# Bus voltage resistor (left side)
# pcb:sch R_VBUS.R x=52.3400 y=24.4000 rot=0

# Overvoltage protection
# pcb:sch D_TVS x=595.9000 y=265.7000 rot=90

# I2C pull-up resistors (right side)
# pcb:sch R_SDA.R x=420.6400 y=87.9000 rot=180
# pcb:sch R_SCL.R x=484.1400 y=87.9000 rot=180

# Alert pull-up (right side)
# pcb:sch R_ALERT.R x=547.6400 y=87.9000 rot=180

# Test points
# pcb:sch TP_IN_PLUS.TP x=-237.2200 y=98.0600 rot=0
# pcb:sch TP_IN_MINUS.TP x=-237.2200 y=313.9600 rot=180
# pcb:sch TP_VBUS.TP x=80.2800 y=59.9600 rot=0
# pcb:sch TP_ALERT.TP x=588.2800 y=-28.9400 rot=0
# pcb:sch TP_VS.TP x=321.5800 y=-41.6400 rot=0

# Power symbols
# pcb:sch VS.1 x=50.8000 y=76.2000 rot=0
# pcb:sch GND.1 x=189.5000 y=430.8000 rot=0

# pcb:sch VCC.1 x=194.5800 y=11.7000 rot=0