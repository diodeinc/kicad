"""INA219A - Zero-Drift, Bidirectional Current/Power Monitor With I²C Interface

The INA219A is a current shunt and power monitor with an I²C or SMBus-compatible interface.
The device monitors both shunt voltage drop and bus supply voltage, with programmable 
conversion times and filtering. A programmable calibration value, combined with an internal
multiplier, enables direct readouts of current in amperes. The device senses across shunts 
on buses that can vary from 0 to 26V. It uses a single 3-5.5V supply, drawing max 1mA.
Operating temperature range: -40°C to 125°C.

Author: @@anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.ti.com/lit/ds/symlink/ina219.pdf
"""

load("@stdlib/interfaces.zen", "I2c", "Power")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
FerriteBead = Module("@stdlib/generics/FerriteBead.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
I2cAddress = enum("0x40", "0x41", "0x42", "0x43", "0x44", "0x45", "0x46", "0x47",
                  "0x48", "0x49", "0x4A", "0x4B", "0x4C", "0x4D", "0x4E", "0x4F")
ShuntRange = enum("40mV", "80mV", "160mV", "320mV")
BusRange = enum("16V", "32V")

# Configuration
add_decoupling = config("add_decoupling", bool, default = True)
add_input_filtering = config("add_input_filtering", bool, default = True)
add_overvoltage_protection = config("add_overvoltage_protection", bool, default = False)
add_test_points = config("add_test_points", bool, default = True)

# I2C configuration
i2c_address = config("i2c_address", I2cAddress, default = "0x40")
add_i2c_pullups = config("add_i2c_pullups", bool, default = True)
i2c_pullup_value = config("i2c_pullup_value", str, default = "4.7kohms")

# Determine address pin connections based on selected I2C address
# I2C Address mapping (from datasheet Table 7-2):
# A1 | A0 | Address
# ---|----|---------
# GND|GND | 0x40
# GND|VS  | 0x41
# GND|SDA | 0x44
# GND|SCL | 0x45
# VS |GND | 0x42
# VS |VS  | 0x43
# VS |SDA | 0x46
# VS |SCL | 0x47
# SDA|GND | 0x48
# SDA|VS  | 0x49
# SDA|SDA | 0x4C
# SDA|SCL | 0x4D
# SCL|GND | 0x4A
# SCL|VS  | 0x4B
# SCL|SDA | 0x4E
# SCL|SCL | 0x4F

# Address mapping dictionary
address_map = {
    I2cAddress("0x40"): ("GND", "GND"),
    I2cAddress("0x41"): ("GND", "VS"),
    I2cAddress("0x42"): ("VS", "GND"),
    I2cAddress("0x43"): ("VS", "VS"),
    I2cAddress("0x44"): ("GND", "SDA"),
    I2cAddress("0x45"): ("GND", "SCL"),
    I2cAddress("0x46"): ("VS", "SDA"),
    I2cAddress("0x47"): ("VS", "SCL"),
    I2cAddress("0x48"): ("SDA", "GND"),
    I2cAddress("0x49"): ("SDA", "VS"),
    I2cAddress("0x4A"): ("SCL", "GND"),
    I2cAddress("0x4B"): ("SCL", "VS"),
    I2cAddress("0x4C"): ("SDA", "SDA"),
    I2cAddress("0x4D"): ("SDA", "SCL"),
    I2cAddress("0x4E"): ("SCL", "SDA"),
    I2cAddress("0x4F"): ("SCL", "SCL"),
}

# Get the pin connections for the selected address
a1_conn, a0_conn = address_map[i2c_address]

# Shunt resistor configuration
shunt_resistance = config("shunt_resistance", str, default = "100mohms")
shunt_range = config("shunt_range", ShuntRange, default = "320mV")
bus_range = config("bus_range", BusRange, default = "32V")

# Input filter configuration
if add_input_filtering:
    input_filter_r = config("input_filter_r", str, default = "10ohms")
    input_filter_c = config("input_filter_c", str, default = "100nF")

# External IO
VS = io("VS", Power)  # Power supply (3-5.5V)
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))
i2c = io("I2C", I2c)  # I2C communication interface

# Bus voltage monitoring pins
IN_PLUS = io("IN_PLUS", Net)  # Positive shunt voltage input
IN_MINUS = io("IN_MINUS", Net)  # Negative shunt voltage input / Bus voltage sense

# Internal nets
_IN_PLUS_FILT = Net("IN_PLUS_FILT") if add_input_filtering else IN_PLUS
_IN_MINUS_FILT = Net("IN_MINUS_FILT") if add_input_filtering else IN_MINUS

# Address pin nets
if a1_conn == "VS":
    _A1 = VS.NET
elif a1_conn == "SDA":
    _A1 = i2c.SDA
elif a1_conn == "SCL":
    _A1 = i2c.SCL
else:  # GND
    _A1 = GND

if a0_conn == "VS":
    _A0 = VS.NET
elif a0_conn == "SDA":
    _A0 = i2c.SDA
elif a0_conn == "SCL":
    _A0 = i2c.SCL
else:  # GND
    _A0 = GND

# Main component
Component(
    name = "INA219A",
    symbol = Symbol(library = "@kicad-symbols/Sensor_Energy.kicad_sym", name = "INA219AxD"),
    footprint = File("@kicad-footprints/Package_SO.pretty/SOIC-8_3.9x4.9mm_P1.27mm.kicad_mod"),
    pins = {
        "IN+": _IN_PLUS_FILT,
        "IN-": _IN_MINUS_FILT,
        "VS": VS.NET,
        "GND": GND,
        "SDA": i2c.SDA,
        "SCL": i2c.SCL,
        "A1": _A1,
        "A0": _A0
    },
)

# Power supply decoupling
if add_decoupling:
    # Local ceramic capacitor
    Capacitor(
        name = "C_VS",
        value = "100nF",
        voltage = "10V",
        package = "0402",
        P1 = VS.NET,
        P2 = GND
    )
    
    # Bulk capacitor
    Capacitor(
        name = "C_BULK",
        value = "1uF",
        voltage = "10V",
        package = "0603",
        P1 = VS.NET,
        P2 = GND
    )

# Input filtering
if add_input_filtering:
    # Series resistors for dV/dt protection
    Resistor(
        name = "R_IN_PLUS",
        value = input_filter_r,
        package = "0402",
        P1 = IN_PLUS,
        P2 = _IN_PLUS_FILT
    )
    
    Resistor(
        name = "R_IN_MINUS",
        value = input_filter_r,
        package = "0402",
        P1 = IN_MINUS,
        P2 = _IN_MINUS_FILT
    )
    
    # Filter capacitors
    Capacitor(
        name = "C_IN_PLUS",
        value = input_filter_c,
        voltage = "50V",
        package = "0402",
        P1 = _IN_PLUS_FILT,
        P2 = GND
    )
    
    Capacitor(
        name = "C_IN_MINUS",
        value = input_filter_c,
        voltage = "50V",
        package = "0402",
        P1 = _IN_MINUS_FILT,
        P2 = GND
    )

# Overvoltage protection
if add_overvoltage_protection:
    # TVS diode for bus voltage protection (26V abs max)
    Component(
        name = "D_TVS",
        symbol = Symbol(library = "@kicad-symbols/Diode.kicad_sym", name = "SMAJ26A"),
        footprint = File("@kicad-footprints/Diode_SMD.pretty/D_SOD-123.kicad_mod"),
        pins = {
            "A1": IN_MINUS,
            "A2": GND
        }
    )

# I2C pull-up resistors
if add_i2c_pullups:
    Resistor(
        name = "R_SDA",
        value = i2c_pullup_value,
        package = "0402",
        P1 = i2c.SDA,
        P2 = VS.NET
    )
    
    Resistor(
        name = "R_SCL",
        value = i2c_pullup_value,
        package = "0402",
        P1 = i2c.SCL,
        P2 = VS.NET
    )

# Test points
if add_test_points:
    TestPoint(
        name = "TP_IN_PLUS",
        variant = "Pad_D1.5mm",
        P1 = IN_PLUS
    )
    
    TestPoint(
        name = "TP_IN_MINUS",
        variant = "Pad_D1.5mm",
        P1 = IN_MINUS
    )
    
    TestPoint(
        name = "TP_VS",
        variant = "Pad_D1.5mm",
        P1 = VS.NET
    )

# External shunt resistor
# Large power resistor for current sensing
Resistor(
    name = "R_SHUNT",
    value = shunt_resistance,
    package = "2512",  # Large SMD package for power handling
    P1 = IN_PLUS,
    P2 = IN_MINUS
)

# pcb:sch C_BULK.C x=270.7800 y=49.8000 rot=0
# pcb:sch C_IN_MINUS.C x=753.3800 y=227.6000 rot=0
# pcb:sch C_IN_PLUS.C x=512.0800 y=49.8000 rot=0
# pcb:sch C_VS.C x=385.0800 y=49.8000 rot=0
# pcb:sch D_TVS x=595.9000 y=265.7000 rot=90
# pcb:sch FB_VS.FB x=174.5140 y=-39.1000 rot=90
# pcb:sch INA219A x=811.8000 y=49.8000 rot=0
# pcb:sch R_IN_MINUS.R x=700.0400 y=164.1000 rot=270
# pcb:sch R_IN_PLUS.R x=700.0400 y=49.8000 rot=270
# pcb:sch R_SCL.R x=1042.9400 y=11.7000 rot=180
# pcb:sch R_SDA.R x=1119.1400 y=11.7000 rot=180
# pcb:sch R_SHUNT x=444.7700 y=-128.0000 rot=0
# pcb:sch TP_IN_MINUS.TP x=626.3800 y=334.2800 rot=180
# pcb:sch TP_IN_PLUS.TP x=626.3800 y=-97.5200 rot=0
# pcb:sch TP_VS.TP x=397.7800 y=-135.6200 rot=0
# pcb:sch GND.1 x=900.7000 y=354.6000 rot=0
# pcb:sch VCC.1 x=905.7800 y=-26.4000 rot=0
# pcb:sch R_SHUNT.R x=623.8400 y=113.3000 rot=0