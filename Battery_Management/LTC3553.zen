"""LTC3553 - Micropower USB Power Manager With Li-Ion Charger, LDO and Buck Regulator

The LTC3553 is a micropower, highly integrated power management and battery charger IC 
for single-cell Li-Ion/Polymer battery applications. It includes a PowerPath manager 
with automatic load prioritization, a battery charger, an ideal diode and numerous 
internal protection features. Designed specifically for USB applications, the LTC3553 
power manager automatically limits input current to a maximum of either 100mA or 500mA. 
Battery charge current is automatically reduced such that the sum of the load current 
and the charge current does not exceed the selected input current limit. The LTC3553 
also includes a synchronous buck regulator, a low dropout linear regulator (LDO), and 
a pushbutton controller. With all supplies enabled in standby mode, the quiescent 
current drawn from the battery is only 12μA.

Author: @Anthropic/claude-opus-4-20250514
Reviewer: Anand Kapadia
Datasheet: https://www.analog.com/media/en/technical-documentation/data-sheets/3553fa.pdf
"""

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
Inductor = Module("@stdlib/generics/Inductor.zen")
Led = Module("@stdlib/generics/Led.zen")
Thermistor = Module("@stdlib/generics/Thermistor.zen")

# Types
ChargeCurrentMode = enum("100mA", "200mA", "300mA", "400mA", "500mA")
PowerMode = enum("100mA", "500mA")
SequenceMode = enum("BuckFirst", "LDOFirst")
BuckVoltage = enum("1.2V", "1.8V", "2.5V", "3.3V")
LdoVoltage = enum("1.2V", "1.8V", "2.5V", "3.3V")

# Configuration
add_input_cap = config("add_input_cap", bool, default = True)
add_output_cap = config("add_output_cap", bool, default = True)
enable_ntc = config("enable_ntc", bool, default = True)
charge_current = config("charge_current", ChargeCurrentMode, default = "400mA")
power_mode = config("power_mode", PowerMode, default = "500mA")
sequence_mode = config("sequence_mode", SequenceMode, default = "BuckFirst")
enable_buck = config("enable_buck", bool, default = True)
enable_ldo = config("enable_ldo", bool, default = True)
buck_voltage = config("buck_voltage", BuckVoltage, default = BuckVoltage("1.2V"))
ldo_voltage = config("ldo_voltage", LdoVoltage, default = LdoVoltage("3.3V"))

# External IO
VBUS = io("VBUS", Net, default = Net("VBUS", symbol = Symbol("@kicad-symbols/power.kicad_sym:VBUS")))
VOUT = io("VOUT", Net, default = Net("VOUT"))
BAT = io("BAT", Net, default = Net("BAT"))
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))
BUCK_OUT = io("BUCK_OUT", Net, default = Net("BUCK_OUT")) if enable_buck else None
LDO_OUT = io("LDO_OUT", Net, default = Net("LDO_OUT")) if enable_ldo else None
ON_BTN = io("ON_BTN", Net, default = Net("ON_BTN"))
PBSTAT = io("PBSTAT", Net, default = Net("PBSTAT"))
CHRG_STAT = io("CHRG_STAT", Net, default = Net("CHRG_STAT"))


# Internal nets
_HPWR = VBUS if power_mode == PowerMode("500mA") else GND
_SUSP = GND  # Normal operation (not suspended)
_SEQ = VOUT if sequence_mode == SequenceMode("LDOFirst") else GND
_STBY = Net("STBY")  # Standby mode control
_BUCK_ON = VBUS if enable_buck else GND
_LDO_ON = VOUT if enable_ldo else GND
_SW = Net("SW") if enable_buck else None
_BUCK_FB = Net("BUCK_FB") if enable_buck else None
_LDO_FB = Net("LDO_FB") if enable_ldo else None
_PROG = Net("PROG")
_NTC = GND if not enable_ntc else Net("NTC")

# Micropower USB Power Manager With Li-Ion Charger, LDO and Buck Regulator, 4.2V float, QFN-20
Component(
    name = "LTC3553",
    symbol = Symbol(library = "@kicad-symbols/Battery_Management.kicad_sym", name = "LTC3553"),
    footprint = File("@kicad-footprints/Package_DFN_QFN.pretty/QFN-20-1EP_3x3mm_P0.4mm_EP1.65x1.65mm.kicad_mod"),
    pins = {
        "HPWR": _HPWR,
        "SUSP": _SUSP,
        "LDO_ON": _LDO_ON,
        "BUCK_ON": _BUCK_ON,
        "STBY": _STBY,
        "~{CHRG}": CHRG_STAT,
        "PBSTAT": PBSTAT,
        "~{ON}": ON_BTN,
        "SEQ": _SEQ,
        "PROG": _PROG,
        "VBUS": VBUS,
        "GND": GND,
        "VOUT": VOUT,
        "BAT": BAT,
        "NTC": _NTC,
        "VINLDO": VOUT,
        "LDO": LDO_OUT if enable_ldo else Net("NC_LDO"),
        "LDO_FB": _LDO_FB if enable_ldo else Net("NC_LDO_FB"),
        "BVIN": VOUT,
        "SW": _SW if enable_buck else Net("NC_SW"),
        "BUCK_FB": _BUCK_FB if enable_buck else Net("NC_BUCK_FB")
    },
)

# Input Capacitor - Required for USB input
if add_input_cap:
    Capacitor(name = "C_VBUS", value = "10uF", package = "0805", P1 = VBUS, P2 = GND)

# Output Capacitor - Required for PowerPath output stability
if add_output_cap:
    Capacitor(name = "C_VOUT", value = "10uF", package = "0805", P1 = VOUT, P2 = GND)

# Charge Current Programming Resistor
charge_current_table = {
    ChargeCurrentMode("100mA"): "7.5kohms",
    ChargeCurrentMode("200mA"): "3.74kohms",
    ChargeCurrentMode("300mA"): "2.49kohms",
    ChargeCurrentMode("400mA"): "1.87kohms",
    ChargeCurrentMode("500mA"): "1.5kohms",
}
r_prog_value = charge_current_table.get(charge_current, "1.87kohms")
Resistor(name = "R_PROG", value = r_prog_value, package = "0402", P1 = _PROG, P2 = GND)

# NTC Thermistor Circuit (if enabled)
if enable_ntc:
    # Bias resistor from VBUS to NTC
    Resistor(name = "R_NTC_BIAS", value = "100kohms", package = "0402", P1 = VBUS, P2 = _NTC)
    # NTC thermistor placeholder (100k at 25°C)
    Thermistor(
        name = "R_NTC", 
        value = "100kohms", 
        package = "0402", 
        temperature_coefficient = "NTC",
        P1 = _NTC, 
        P2 = GND,
    )

# Buck Regulator Components
if enable_buck:
    # Buck compensation capacitor
    Capacitor(name = "C_BUCK_COMP", value = "10pF", package = "0402", P1 = BUCK_OUT, P2 = _BUCK_FB)
    
    # Buck output capacitor
    Capacitor(name = "C_BUCK", value = "10uF", package = "0805", P1 = BUCK_OUT, P2 = GND)
    
    # Buck feedback resistors
    # VOUT = 0.8V * (1 + R1/R2)
    if buck_voltage == BuckVoltage("1.2V"):
        l_buck = "10uH"
        r1_buck = "332kohms"
        r2_buck = "649kohms"
    elif buck_voltage == BuckVoltage("1.8V"):
        l_buck = "10uH"
        r1_buck = "649kohms"
        r2_buck = "499kohms"
    elif buck_voltage == BuckVoltage("2.5V"):
        l_buck = "6.8uH"
        r1_buck = "649kohms"
        r2_buck = "301kohms"
    elif buck_voltage == BuckVoltage("3.3V"):
        l_buck = "4.7uH"
        r1_buck = "649kohms"
        r2_buck = "200kohms"
    else:  # Default 1.2V
        l_buck = "10uH"
        r1_buck = "332kohms"
        r2_buck = "649kohms"
    
    # Buck inductor
    Inductor(name = "L_BUCK", value = l_buck, package = "1210", P1 = _SW, P2 = BUCK_OUT)

    Resistor(name = "R_BUCK_FB1", value = r1_buck, package = "0402", P1 = BUCK_OUT, P2 = _BUCK_FB)
    Resistor(name = "R_BUCK_FB2", value = r2_buck, package = "0402", P1 = _BUCK_FB, P2 = GND)

# LDO Components
if enable_ldo:
    # LDO input capacitor
    Capacitor(name = "C_VINLDO", value = "2.2uF", package = "0603", P1 = VOUT, P2 = GND)
    
    # LDO output capacitor
    Capacitor(name = "C_LDO", value = "4.7uF", package = "0603", P1 = LDO_OUT, P2 = GND)
    
    # LDO feedback resistors
    # VOUT = 0.8V * (1 + R1/R2)
    if ldo_voltage == LdoVoltage("1.2V"):
        r1_ldo = "2.05Mohms"
        r2_ldo = "4.02Mohms"
    elif ldo_voltage == LdoVoltage("1.8V"):
        r1_ldo = "2.05Mohms"
        r2_ldo = "1.58Mohms"
    elif ldo_voltage == LdoVoltage("2.5V"):
        r1_ldo = "2.05Mohms"
        r2_ldo = "953kohms"
    elif ldo_voltage == LdoVoltage("3.3V"):
        r1_ldo = "2.05Mohms"
        r2_ldo = "649kohms"
    else:  # Default 3.3V
        r1_ldo = "2.05Mohms"
        r2_ldo = "649kohms"
    
    Resistor(name = "R_LDO_FB1", value = r1_ldo, package = "0402", P1 = LDO_OUT, P2 = _LDO_FB)
    Resistor(name = "R_LDO_FB2", value = r2_ldo, package = "0402", P1 = _LDO_FB, P2 = GND)

# Standby Mode Control - Pull low for normal operation, high for standby
Resistor(name = "R_STBY", value = "100kohms", package = "0402", P1 = _STBY, P2 = GND)

# Pushbutton Status Pull-up
Resistor(name = "R_PBSTAT", value = "100kohms", package = "0402", P1 = PBSTAT, P2 = VOUT)

# Charge Status LED Resistor
_CHRG_LED = Net("_CHRG_LED")
Resistor(name = "R_CHRG", value = "10kohms", package = "0402", P1 = CHRG_STAT, P2 = _CHRG_LED)

# Charge Status LED
Led(name = "LED_CHRG", package = "0603", A = _CHRG_LED, K = VOUT, color = "green")

# pcb:sch C_BAT.C x=1375.6800 y=786.4000 rot=0
# pcb:sch C_BUCK.C x=1286.7800 y=1040.4000 rot=0
# pcb:sch C_LDO.C x=1274.0800 y=849.9000 rot=0
# pcb:sch C_VBUS.C x=626.3800 y=494.3000 rot=0
# pcb:sch C_VINLDO.C x=981.9800 y=761.0000 rot=0
# pcb:sch C_VOUT.C x=1007.3800 y=595.9000 rot=0
# pcb:sch LTC3553 x=557.8000 y=583.2000 rot=0
# pcb:sch L_BUCK.L x=1024.5381 y=989.6000 rot=270
# pcb:sch R_BAT.R x=1220.7400 y=646.7000 rot=270
# pcb:sch R_BUCK_FB1.R x=1157.2400 y=1040.4000 rot=0
# pcb:sch R_BUCK_FB2.R x=1246.1400 y=1116.6000 rot=270
# pcb:sch R_CHRG.R x=369.8400 y=773.7000 rot=90
# pcb:sch R_LDO_FB1.R x=1119.1400 y=849.9000 rot=0
# pcb:sch R_LDO_FB2.R x=1208.0400 y=900.7000 rot=270
# pcb:sch R_PBSTAT.R x=369.8400 y=824.5000 rot=90
# pcb:sch R_PROG.R x=522.2400 y=989.6000 rot=0
# pcb:sch R_STBY.R x=484.1400 y=722.9000 rot=90
# pcb:sch GND.1 x=722.9000 y=1078.5000 rot=0
# pcb:sch C_BUCK_COMP.C x=1070.8800 y=1040.4000 rot=0
# pcb:sch R_NTC.R x=1144.5400 y=697.5000 rot=270
# pcb:sch R_NTC_BIAS.R x=1144.5400 y=557.8000 rot=0

# pcb:sch LED_CHRG.LED x=274.5900 y=730.5200 rot=90
# pcb:sch R_NTC.TH x=1117.2350 y=646.7000 rot=0
# pcb:sch GND.2 x=1281.7000 y=951.5000 rot=0
# pcb:sch GND.3 x=1294.4000 y=1205.5000 rot=0
# pcb:sch VBUS.1 x=727.9800 y=443.5000 rot=0
# pcb:sch GND.5 x=634.0000 y=570.5000 rot=0
# pcb:sch GND.7 x=418.1000 y=773.7000 rot=0
# pcb:sch VBUS.2 x=1147.0800 y=519.7000 rot=0
# pcb:sch GND.8 x=456.2000 y=1078.5000 rot=0
# pcb:sch GND.9 x=1142.0000 y=735.6000 rot=0
# pcb:sch GND.10 x=1015.0000 y=684.8000 rot=0
# pcb:sch GND.11 x=989.6000 y=849.9000 rot=0
# pcb:sch GND.4 x=532.4000 y=672.1000 rot=0

# pcb:sch VBUS.3 x=499.3800 y=583.2000 rot=0