"""TP4057 - 500mA Linear Li-Ion Battery Charger

The TP4057 is a complete constant-current/constant-voltage linear charger for single cell 
lithium-ion batteries. Its TSOT-23-6 package and low external component count make it 
ideally suited for portable applications. The device features programmable charge current 
up to 500mA, automatic charge termination, automatic recharge, reverse battery protection, 
and two status indicator outputs. No external sense resistor or blocking diode is required.

Key features:
- Programmable charge current up to 500mA
- 4.2V ±1% charge voltage accuracy
- C/10 charge termination
- Automatic recharge
- Reverse battery protection
- Dual status outputs (CHRG and STDBY)
- Thermal regulation
- 40µA supply current in shutdown
- 4.5V to 9V input voltage range

Author: @anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://datasheet.lcsc.com/lcsc/2304140030_TOPPOWER-Nanjing-Extension-Microelectronics-TP4057-42-SNT_C2832435.pdf
"""

# No longer using Power interface

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
Led = Module("@stdlib/generics/Led.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
ChargeCurrent = enum("50mA", "100mA", "200mA", "250mA", "300mA", "400mA", "500mA")
StatusIndication = enum("None", "LEDs", "Logic")
InputProtection = enum("None", "Basic", "Enhanced")

# Configuration
charge_current = config("charge_current", ChargeCurrent, default = "400mA")
    
status_indication = config("status_indication", StatusIndication, default = "LEDs")
if status_indication == StatusIndication("LEDs"):
    chrg_led_resistor = config("chrg_led_resistor", str, default = "1.5kohms")
    stdby_led_resistor = config("stdby_led_resistor", str, default = "1.2kohms")
    chrg_led_color = config("chrg_led_color", str, default = "red")
    stdby_led_color = config("stdby_led_color", str, default = "green")

input_protection = config("input_protection", InputProtection, default = "Enhanced")
add_input_series_resistor = config("add_input_series_resistor", bool, default = True)
if add_input_series_resistor:
    input_series_resistance = config("input_series_resistance", str, default = "0.3ohms")

add_output_capacitor = config("add_output_capacitor", bool, default = True)
if add_output_capacitor:
    output_capacitor_value = config("output_capacitor_value", str, default = "10uF")

add_test_points = config("add_test_points", bool, default = True, optional = True)

# External IO
VIN = io("VIN", Net, default = Net("VIN", symbol = Symbol("@kicad-symbols/power.kicad_sym:VDD")))
VBAT = io("VBAT", Net, default = Net("VBAT", symbol = Symbol("@kicad-symbols/power.kicad_sym:+BATT")))
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))

# Status outputs - conditionally exposed based on configuration
if status_indication == StatusIndication("Logic"):
    CHRG = io("CHRG", Net)
    STDBY = io("STDBY", Net)
    _CHRG = CHRG
    _STDBY = STDBY
else:
    _CHRG = Net("CHRG")
    _STDBY = Net("STDBY")

# Internal nets
_VCC = Net("VCC")
_PROG = Net("PROG")
_BAT = Net("BAT")

# Input protection and filtering
if input_protection != InputProtection("None"):
    # Input capacitor for ripple filtering
    Capacitor(
        name = "C_IN",
        value = "10uF",
        voltage = "16V",
        package = "0805",
        P1 = VIN,
        P2 = GND
    )
    
    # Additional ceramic capacitor for high frequency filtering
    if input_protection == InputProtection("Enhanced"):
        Capacitor(
            name = "C_IN_HF",
            value = "100nF",
            voltage = "16V", 
            package = "0402",
            P1 = VIN,
            P2 = GND
        )

# Series input resistor for current limiting and thermal management
if add_input_series_resistor:
    Resistor(
        name = "R_IN",
        value = input_series_resistance,
        package = "0805",
        P1 = VIN,
        P2 = _VCC
    )
else:
    # Direct connection
    _VCC = VIN

# Battery output connection - direct assignment
_BAT = VBAT


# Main TP4057 Component
Component(
    name = "U1",
    symbol = Symbol(library = "@kicad-symbols/Battery_Management.kicad_sym", name = "TP4057"),
    footprint = File("@kicad-footprints/Package_TO_SOT_SMD.pretty/TSOT-23-6.kicad_mod"),
    pins = {
        "~{CHRG}": _CHRG,
        "GND": GND,
        "BAT": _BAT,
        "V_{CC}": _VCC,
        "STDBY": _STDBY,
        "PROG": _PROG
    },
)


# Output capacitor
if add_output_capacitor:
    Capacitor(
        name = "C_OUT",
        value = output_capacitor_value,
        voltage = "6.3V",
        package = "0805",
        P1 = _BAT,
        P2 = GND
    )

# Programming resistor for charge current setting
# Based on datasheet table: RPROG (kΩ) vs IBAT (mA)
if charge_current == ChargeCurrent("50mA"):
    rprog_value = "20kohms"
elif charge_current == ChargeCurrent("100mA"):
    rprog_value = "10kohms"
elif charge_current == ChargeCurrent("200mA"):
    rprog_value = "5kohms"
elif charge_current == ChargeCurrent("250mA"):
    rprog_value = "4kohms"
elif charge_current == ChargeCurrent("300mA"):
    rprog_value = "3kohms"
elif charge_current == ChargeCurrent("400mA"):
    rprog_value = "2kohms"
else:  # 500mA
    rprog_value = "1.6kohms"

Resistor(
    name = "R_PROG",
    value = rprog_value,
    package = "0402",
    P1 = _PROG,
    P2 = GND
)

# Status indication
if status_indication == StatusIndication("LEDs"):
    # Status indicator LEDs with current limiting resistors
    # CHRG/STDBY outputs are open-drain, pulling to ~0.3V when active
    # Choose resistor values based on your VCC voltage and desired LED current
    
    # Charging indicator LED (active when charging)
    _CHRG_LED_A = Net("CHRG_LED_A")
    Led(
        name = "LED_CHRG",
        color = chrg_led_color,
        package = "0603",
        A = _VCC,
        K = _CHRG_LED_A
    )
    Resistor(
        name = "R_CHRG",
        value = chrg_led_resistor,
        package = "0402",
        P1 = _CHRG_LED_A,
        P2 = _CHRG
    )
    
    # Standby/Complete indicator LED (active when charge complete)
    _STDBY_LED_A = Net("STDBY_LED_A")
    Led(
        name = "LED_STDBY",
        color = stdby_led_color,
        package = "0603",
        A = _VCC,
        K = _STDBY_LED_A
    )
    Resistor(
        name = "R_STDBY",
        value = stdby_led_resistor,
        package = "0402",
        P1 = _STDBY_LED_A,
        P2 = _STDBY
    )

else:  # Logic or None
    # Pull-up resistors for logic-level outputs or unused pins
    Resistor(
        name = "R_CHRG_PU",
        value = "100kohms",
        package = "0402",
        P1 = _CHRG,
        P2 = _VCC
    )
    Resistor(
        name = "R_STDBY_PU", 
        value = "100kohms",
        package = "0402",
        P1 = _STDBY,
        P2 = _VCC
    )

# Test points
if add_test_points:
    TestPoint(
        name = "TP_VCC",
        variant = "THTPad_D1.0mm_Drill0.5mm",
        P1 = _VCC
    )
    TestPoint(
        name = "TP_BAT",
        variant = "THTPad_D1.0mm_Drill0.5mm", 
        P1 = _BAT
    )
    TestPoint(
        name = "TP_PROG",
        variant = "THTPad_D1.0mm_Drill0.5mm",
        P1 = _PROG
    )
    TestPoint(
        name = "TP_CHRG",
        variant = "THTPad_D1.0mm_Drill0.5mm",
        P1 = _CHRG
    )
    TestPoint(
        name = "TP_STDBY",
        variant = "THTPad_D1.0mm_Drill0.5mm",
        P1 = _STDBY
    )

# Ground connections are implicit through the GND net

# pcb:sch U1 x=786.4000 y=684.8000 rot=0
# pcb:sch C_IN.C x=410.4800 y=735.6000 rot=0
# pcb:sch R_IN.R x=484.1400 y=595.9000 rot=270
# pcb:sch C_OUT.C x=1058.1800 y=811.8000 rot=0
# pcb:sch R_PROG.R x=1004.8400 y=811.8000 rot=0
# pcb:sch LED_CHRG.LED x=646.7000 y=654.3200 rot=270
# pcb:sch R_CHRG.R x=712.7400 y=697.5000 rot=270
# pcb:sch LED_STDBY.LED x=532.4000 y=692.4200 rot=270
# pcb:sch R_STDBY.R x=611.1400 y=748.3000 rot=270
# pcb:sch GND.1 x=875.3000 y=951.5000 rot=0
# pcb:sch VIN.1 x=423.1800 y=595.9000 rot=0
# pcb:sch VBAT.1 x=1070.8800 y=684.8000 rot=0
# pcb:sch C_IN_HF.C x=270.7800 y=735.6000 rot=0
# pcb:sch TP_BAT.TP x=1007.3800 y=682.2600 rot=0
# pcb:sch TP_CHRG.TP x=766.0800 y=910.8600 rot=180
# pcb:sch TP_PROG.TP x=1134.3800 y=733.0600 rot=0
# pcb:sch TP_STDBY.TP x=715.2800 y=910.8600 rot=180
# pcb:sch TP_VCC.TP x=880.3800 y=580.6600 rot=0
# pcb:sch R_CHRG_PU.R x=674.6400 y=646.7000 rot=180
# pcb:sch R_STDBY_PU.R x=598.4400 y=646.7000 rot=180