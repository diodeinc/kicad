"""W25X40CLSN - 4Mbit Serial Flash Memory with 4KB Sectors and Dual I/O SPI

The W25X40CL is a 4M-bit (512K-byte) Serial Flash memory that provides a storage 
solution for systems with limited space, pins and power. It operates on a single 
2.3V to 3.6V power supply with current consumption as low as 1mA active and 1Î¼A 
for power-down. The device supports standard SPI, Dual Output, and Dual I/O SPI 
interfaces with clock frequencies up to 104MHz, allowing equivalent clock rates 
of 208MHz when using Fast Read Dual Output instructions. It features uniform 4KB 
sectors, 32KB and 64KB blocks for flexible erase operations, and includes hardware 
and software write protection capabilities.

Author: @Anthropic/claude-opus-4-20250514
Reviewer: Nasheed Ur Rehman
Datasheet: http://www.advanced-monolithic.com/pdf/ds1117.pdf
"""

load("@stdlib/interfaces.zen", "Spi")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")

# Types
WriteProtectMode = enum("Software", "Hardware", "None")

# Configuration
add_decoupling = config("add_decoupling", bool, default = True)
add_cs_pullup = config("add_cs_pullup", bool, default = True)
write_protect_mode = config("write_protect_mode", WriteProtectMode, default = "Software")
enable_hold = config("enable_hold", bool, default = True)

# External IO
spi = io("spi", Spi, default = Spi("spi"))
VCC = io("VCC", Net, default = Net("VCC", symbol = Symbol("@kicad-symbols/power.kicad_sym:VCC")))
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))

# Additional IO based on configuration
if write_protect_mode == WriteProtectMode("Hardware"):
    WP_CTRL = io("WP", Net, default = Net("nWP"))
    _WP = WP_CTRL
elif write_protect_mode == WriteProtectMode("None"):
    _WP = VCC
else:  # Software mode
    _WP = Net("WP")

if enable_hold:
    HOLD_CTRL = io("HOLD", Net, default = Net("nHOLD"))
    _HOLD = HOLD_CTRL
else:
    _HOLD = Net("HOLD")

# Internal nets
_CS = spi.CS if spi.CS else Net("CS")
_CLK = spi.CLK if spi.CLK else Net("CLK")
_DI = spi.MOSI if spi.MOSI else Net("DI/IO_0")
_DO = spi.MISO if spi.MISO else Net("DO/IO_1")

# 4Mbit / 512KiB Serial Flash memory, Standard/Dual I/O SPI, 2.3-3.6V, SOIC-8 (150 mil)
Component(
    name = "W25X40CLSN",
    symbol = Symbol(library = "@kicad-symbols/Memory_Flash.kicad_sym", name = "W25X40CLSN"),
    footprint = File("@kicad-footprints/Package_SO.pretty/SOIC-8_3.9x4.9mm_P1.27mm.kicad_mod"),
    pins = {
        "~{CS}": _CS,
        "CLK": _CLK,
        "DI/IO_{0}": _DI,
        "DO/IO_{1}": _DO,
        "~{WP}": _WP,
        "~{HOLD}": _HOLD,
        "VCC": VCC,
        "GND": GND
    },
)

# Power Supply Decoupling
if add_decoupling:
    # Primary decoupling capacitor (ceramic)
    Capacitor(name = "C_DEC", value = "100nF", package = "0402", P1 = VCC, P2 = GND)
    
    # Bulk capacitor for power stability
    Capacitor(name = "C_BULK", value = "4.7uF", package = "0603", P1 = VCC, P2 = GND)

# CS Pull-up Resistor
if add_cs_pullup:
    # CS pull-up to ensure chip is deselected by default
    # Datasheet specifies CS must track VCC at power-up
    Resistor(name = "R_CS", value = "10kohms", package = "0402", P1 = _CS, P2 = VCC)

# WP pull-up for software write protection (when not using hardware WP)
if write_protect_mode == WriteProtectMode("Software"):
    Resistor(name = "R_WP", value = "10kohms", package = "0402", P1 = _WP, P2 = VCC)

# HOLD pull-up to prevent unintended hold conditions
if enable_hold:
    Resistor(name = "R_HOLD", value = "10kohms", package = "0402", P1 = _HOLD, P2 = VCC)

# pcb:sch W25X40CLSN x=-1.0000 y=-1.0000 rot=0
# pcb:sch C_DEC.C x=321.5800 y=62.5000 rot=0
# pcb:sch C_BULK.C x=207.2800 y=62.5000 rot=0
# pcb:sch R_CS.R x=-163.5600 y=-39.1000 rot=180
# pcb:sch R_WP.R x=-214.3600 y=24.4000 rot=180
# pcb:sch R_HOLD.R x=-265.1600 y=62.5000 rot=180
# pcb:sch GND.1 x=87.9000 y=265.7000 rot=0
# pcb:sch VCC.1 x=92.9800 y=-89.9000 rot=0
