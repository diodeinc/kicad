"""CS2000 - Fractional-N Clock Synthesizer & Clock Multiplier

The CS2000-CP is an extremely versatile system clocking device that utilizes a programmable 
phase lock loop. It is based on a hybrid analog-digital PLL architecture comprised of a 
Delta-Sigma Fractional-N Frequency Synthesizer and a Digital PLL. This architecture allows 
for both frequency synthesis/clock generation from a stable reference clock as well as 
generation of a low-jitter clock relative to an external noisy synchronization clock. 
The device generates a low jitter 6-75 MHz clock from an 8-75 MHz reference clock and 
supports both IÂ²C and SPI for full software control.

Author: @anthropic/claude-3-5-sonnet-20241022
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.cirrus.com/cn/pubs/proDatasheet/CS2000-CP_F3.pdf
"""

load("@stdlib/interfaces.zen", "I2c", "Spi")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
Crystal = Module("@stdlib/generics/Crystal.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
ControlInterface = enum("I2C", "SPI")
ReferenceSource = enum("Crystal", "External")
CrystalFreq = enum("8MHz", "12MHz", "16MHz", "25MHz", "40MHz")
I2cAddress = enum("0x4E", "0x4F")  # Based on AD0 pin

# Configuration
control_interface = config("control_interface", ControlInterface, default = "I2C")
reference_source = config("reference_source", ReferenceSource, default = "Crystal")

if reference_source == ReferenceSource("Crystal"):
    crystal_freq = config("crystal_freq", CrystalFreq, default = "25MHz")
    crystal_load_capacitance = config("crystal_load_capacitance", str, default = "40pF")

if control_interface == ControlInterface("I2C"):
    i2c_address = config("i2c_address", I2cAddress, default = "0x4E")
    add_i2c_pullups = config("add_i2c_pullups", bool, default = True)

add_aux_output = config("add_aux_output", bool, default = True)

add_decoupling_caps = config("add_decoupling_caps", bool, default = True)
add_test_points = config("add_test_points", bool, default = True)

# External IO
VDD = io("VDD", Net, default = Net("VDD", symbol = Symbol("@kicad-symbols/power.kicad_sym:VDD")))
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))

# Clock inputs
CLK_IN = io("CLK_IN", Net)  # Frequency reference clock input

# Clock outputs
CLK_OUT = io("CLK_OUT", Net)  # PLL clock output

# Auxiliary output (if enabled)
if add_aux_output:
    AUX_OUT = io("AUX_OUT", Net)
else:
    _AUX_OUT = Net("AUX_OUT_NC")  # Internal net when not used

# Control interface
if control_interface == ControlInterface("I2C"):
    i2c = io("I2C", I2c)
    _SDA = i2c.SDA
    _SCL = i2c.SCL
    # AD0/CS pin configuration for I2C address
    if i2c_address == I2cAddress("0x4E"):
        _AD0_CS = GND  # AD0 = 0
    else:  # 0x4F
        _AD0_CS = VDD   # AD0 = 1
else:  # SPI
    spi = io("SPI", Spi)
    _SDA = spi.MOSI # SDA/CDIN in SPI mode
    _SCL = spi.CLK   # SCL/CCLK in SPI mode
    _AD0_CS = spi.CS # AD0/CS in SPI mode

# Reference clock configuration
if reference_source == ReferenceSource("Crystal"):
    _XTI = Net("XTI")
    _XTO = Net("XTO")
else:  # External reference
    REF_CLK = io("REF_CLK", Net)  # External reference clock input
    _XTI = REF_CLK
    _XTO = Net("XTO_NC")  # Not connected when using external reference

# Fractional-N Clock Synthesizer & Clock Multiplier, MSOP-10
Component(
    name = "CS2000",
    symbol = Symbol(library = "@kicad-symbols/Timer_PLL.kicad_sym", name = "CS2000-CP"),
    footprint = File("@kicad-footprints/Package_SO.pretty/MSOP-10_3x3mm_P0.5mm.kicad_mod"),
    pins = {
        "VD": VDD,
        "GND": GND,
        "CLK_OUT": CLK_OUT,
        "AUX_OUT": AUX_OUT if add_aux_output else _AUX_OUT,
        "CLK_IN": CLK_IN,
        "XTO": _XTO,
        "XTI/REF_CLK": _XTI,
        "AD0/~{CS}": _AD0_CS,
        "SCL/CCLK": _SCL,
        "SDA/CDIN": _SDA
    },
)

# Crystal oscillator circuit (if configured)
if reference_source == ReferenceSource("Crystal"):
    # Crystal frequency mapping
    freq_map = {
        CrystalFreq("8MHz"): "8MHz",
        CrystalFreq("12MHz"): "12MHz",
        CrystalFreq("16MHz"): "16MHz",
        CrystalFreq("25MHz"): "25MHz",
        CrystalFreq("40MHz"): "40MHz"
    }
    
    # Crystal with load capacitors
    Crystal(
        name = "Y1",
        frequency = freq_map[crystal_freq],
        package = "3225_4Pin",
        XIN = _XTI,
        XOUT = _XTO,
        GND = GND
    )
    
    # Load capacitors
    Capacitor(name = "C_XTAL1", value = crystal_load_capacitance, package = "0402", P1 = _XTI, P2 = GND)
    Capacitor(name = "C_XTAL2", value = crystal_load_capacitance, package = "0402", P1 = _XTO, P2 = GND)
else:
    # External reference - XTO should be left unconnected or pulled low through 47k resistor
    Resistor(name = "R_XTO", value = "47kohms", package = "0402", P1 = _XTO, P2 = GND)

# I2C pull-up resistors (if configured)
if control_interface == ControlInterface("I2C") and add_i2c_pullups:
    Resistor(name = "R_SDA", value = "2kohms", package = "0402", P1 = _SDA, P2 = VDD)
    Resistor(name = "R_SCL", value = "2kohms", package = "0402", P1 = _SCL, P2 = VDD)

# Power supply decoupling capacitors
if add_decoupling_caps:
    # Bulk capacitor
    Capacitor(name = "C_BULK", value = "1uF", package = "0603", P1 = VDD, P2 = GND)
    
    # High-frequency decoupling
    Capacitor(name = "C_DECOUPLE", value = "0.1uF", package = "0402", P1 = VDD, P2 = GND)

# Test points (if configured)
if add_test_points:
    TestPoint(name = "TP_CLK_IN", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = CLK_IN)
    TestPoint(name = "TP_CLK_OUT", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = CLK_OUT)
    
    if add_aux_output:
        TestPoint(name = "TP_AUX_OUT", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = AUX_OUT)
    
    if reference_source == ReferenceSource("External"):
        TestPoint(name = "TP_REF_CLK", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = REF_CLK)

# pcb:sch CS2000 x=380.0000 y=430.8000 rot=0
# pcb:sch C_BULK.C x=194.5800 y=507.0000 rot=0
# pcb:sch C_DECOUPLE.C x=92.9800 y=507.0000 rot=0
# pcb:sch C_XTAL1.C x=816.8800 y=583.2000 rot=0
# pcb:sch C_XTAL2.C x=1045.4800 y=583.2000 rot=0
# pcb:sch R_SCL.R x=268.2400 y=392.7000 rot=180
# pcb:sch R_SDA.R x=319.0400 y=392.7000 rot=180
# pcb:sch Y1.Y x=913.4000 y=519.7000 rot=0
# pcb:sch GND.1 x=545.1000 y=735.6000 rot=0
# pcb:sch GND.2 x=938.8000 y=684.8000 rot=0
# pcb:sch VDD.1 x=105.6800 y=341.9000 rot=0
# pcb:sch TP_AUX_OUT.TP x=753.3800 y=580.6600 rot=180
# pcb:sch TP_CLK_IN.TP x=359.6800 y=313.9600 rot=0
# pcb:sch TP_CLK_OUT.TP x=753.3800 y=479.0600 rot=0
# pcb:sch R_XTO.R x=280.9400 y=621.3000 rot=90
# pcb:sch TP_REF_CLK.TP x=334.2800 y=694.9600 rot=180