"""DAC7513 - 12-Bit, Low-Power, Rail-to-Rail Output, Serial Input Digital-to-Analog Converter

The DAC7513 is a low-power, single-channel, 12-bit voltage output digital-to-analog converter (DAC).
It features excellent linearity (±8 LSB INL), low power consumption (115µA at 5V), and operates 
from 2.7V to 5.5V. The device uses a versatile three-wire serial interface (SPI-compatible) that 
operates at clock rates up to 30MHz. It includes power-on reset to zero scale and power-down modes. 
The DAC provides rail-to-rail output operation with an internal precision output amplifier. Unlike 
similar DACs, it requires an external reference voltage (VREF) for setting the output range, which 
allows for multiplying DAC operation.

Author: @anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.ti.com/lit/ds/symlink/dac7513.pdf
"""

load("@stdlib/interfaces.zen", "Spi", "Power")

# Import modules
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
ReferenceSource = enum("External", "VDD")
OutputLoad = enum("Light", "Heavy")

# Configuration
add_power_decoupling = config("add_power_decoupling", bool, default = True)
add_bulk_capacitor = config("add_bulk_capacitor", bool, default = True)
add_output_filtering = config("add_output_filtering", bool, default = True)
if add_output_filtering:
    output_load = config("output_load", OutputLoad, default = "Light")

reference_source = config("reference_source", ReferenceSource, default = "External")
if reference_source == ReferenceSource("External"):
    add_reference_filtering = config("add_reference_filtering", bool, default = True)
    add_reference_bulk_cap = config("add_reference_bulk_cap", bool, default = True)
else:
    add_reference_filtering = config("add_reference_filtering", bool, default = False)
    add_reference_bulk_cap = config("add_reference_bulk_cap", bool, default = False)

add_test_points = config("add_test_points", bool, default = True)

# External IO
VDD = io("VDD", Power, default = Power("VDD"))
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))

# SPI interface - Note: This is SPI-compatible but uses SYNC instead of CS
spi = io("SPI", Spi)

# Reference voltage - can be external or tied to VDD
if reference_source == ReferenceSource("External"):
    VREF = io("VREF", Net)
else:
    VREF = VDD.NET

# Output
VOUT = io("VOUT", Net)

# Internal nets
_VOUT_INT = Net("VOUT_INT") if add_output_filtering else VOUT

# Handle reference filtering for both external and VDD sources
if add_reference_filtering:
    if reference_source == ReferenceSource("External"):
        _VREF_FILT = Net("VREF_FILT")
    else:  # VDD as reference
        _VREF_FILT = Net("VDD_REF_FILT")
else:
    _VREF_FILT = VREF

# Main component
Component(
    name = "DAC7513",
    symbol = Symbol(library = "@kicad-symbols/Analog_DAC.kicad_sym", name = "DAC7513_DCN"),
    footprint = File("@kicad-footprints/Package_TO_SOT_SMD.pretty/SOT-23-8.kicad_mod"),
    pins = {
        "DIN": spi.MOSI,
        "SCLK": spi.CLK,
        "~{SYNC}": spi.CS,
        "VCC": VDD.NET,
        "GND": GND,
        "VOUT": _VOUT_INT,
        "VFB": _VOUT_INT,  # Feedback pin connected to output for unity gain
        "VREF": _VREF_FILT
    },
)

# Power supply decoupling - as recommended in datasheet layout section
if add_power_decoupling:
    # High frequency decoupling capacitor close to VDD pin
    Capacitor(
        name = "C_VDD",
        value = "0.1uF",
        package = "0402",
        P1 = VDD.NET,
        P2 = GND
    )

# Bulk capacitor - as recommended in datasheet (1µF to 10µF)
if add_bulk_capacitor:
    # Bulk capacitor for power supply
    Capacitor(
        name = "C_BULK",
        value = "10uF",
        package = "0805",
        P1 = VDD.NET,
        P2 = GND
    )

# Reference voltage filtering - important for noise performance
if add_reference_filtering:
    # RC filter as shown in Figure 10 of datasheet
    if reference_source == ReferenceSource("External"):
        # Series resistor for external reference
        Resistor(
            name = "R_REF",
            value = "10ohms",
            package = "0402",
            P1 = VREF,
            P2 = _VREF_FILT
        )
    else:  # VDD as reference
        # Series resistor for VDD reference
        Resistor(
            name = "R_REF",
            value = "10ohms",
            package = "0402",
            P1 = VDD.NET,
            P2 = _VREF_FILT
        )
    
    # High frequency bypass capacitor (0.1µF as shown in Figure 10)
    Capacitor(
        name = "C_REF",
        value = "0.1uF",
        package = "0402",
        P1 = _VREF_FILT,
        P2 = GND
    )

# Bulk reference capacitor for low-frequency filtering
if add_reference_bulk_cap:
    # Filter capacitor for reference (10µF as shown in Figure 10)
    Capacitor(
        name = "C_REF_BULK",
        value = "10uF",
        package = "0805",
        P1 = _VREF_FILT if add_reference_filtering else (VREF if reference_source == ReferenceSource("External") else VDD.NET),
        P2 = GND
    )

# Output filtering - optional based on application
if add_output_filtering:
    # RC filter for output
    # Series resistor
    Resistor(
        name = "R_OUT",
        value = "100ohms",
        package = "0402",
        P1 = _VOUT_INT,
        P2 = VOUT
    )
    
    # Filter capacitor - value depends on load
    if output_load == OutputLoad("Light"):
        # Light load: smaller capacitor to maintain stability
        Capacitor(
            name = "C_OUT",
            value = "100pF",
            package = "0402",
            P1 = VOUT,
            P2 = GND
        )
    else:  # Heavy load
        # Heavy load: larger capacitor for better filtering
        # DAC can drive up to 1000pF while maintaining stability
        Capacitor(
            name = "C_OUT",
            value = "470pF",
            package = "0402",
            P1 = VOUT,
            P2 = GND
        )

# Test points for debugging
if add_test_points:
    # Test point on output
    TestPoint(
        name = "TP_VOUT",
        variant = "Pad_D1.0mm",
        P1 = VOUT
    )
    
    # Test point on VDD
    TestPoint(
        name = "TP_VDD",
        variant = "Pad_D1.0mm",
        P1 = VDD.NET
    )
    
    # Test point on VREF (if external)
    if reference_source == ReferenceSource("External"):
        TestPoint(
            name = "TP_VREF",
            variant = "Pad_D1.0mm",
            P1 = VREF
        )

# pcb:sch C_BULK.C x=181.8800 y=405.4000 rot=0
# pcb:sch C_REF.C x=766.0800 y=507.0000 rot=0
# pcb:sch C_REF_BULK.C x=854.9800 y=507.0000 rot=0
# pcb:sch C_VDD.C x=270.7800 y=405.4000 rot=0
# pcb:sch DAC7513 x=430.8000 y=341.9000 rot=0
# pcb:sch R_REF.R x=1030.2400 y=430.8000 rot=90
# pcb:sch GND.1 x=189.5000 y=608.6000 rot=0
# pcb:sch VDD_VCC.1 x=194.5800 y=278.4000 rot=0
# pcb:sch C_OUT.C x=943.8800 y=494.3000 rot=0
# pcb:sch R_OUT.R x=827.0400 y=392.7000 rot=270
# pcb:sch TP_VDD.TP x=397.7800 y=245.3800 rot=0
# pcb:sch TP_VOUT.TP x=956.5800 y=346.9800 rot=0
# pcb:sch TP_VREF.TP x=1147.0800 y=410.4800 rot=0