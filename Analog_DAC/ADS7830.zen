"""ADS7830 - 8-Bit, 8-Channel Sampling ADC with I2C Interface

The ADS7830 is a single-supply, low-power, 8-bit data acquisition device that features a serial I2C 
interface and an 8-channel multiplexer. The Analog-to-Digital (A/D) converter features a sample-and-hold 
amplifier and internal, asynchronous clock. The combination of an I2C serial, 2-wire interface and 
micropower consumption makes the ADS7830 ideal for applications requiring the A/D converter to be close 
to the input source in remote locations and for applications requiring isolation. Features include 
70kHz sampling rate, ±0.5 LSB INL/DNL, 8 bits no missing codes, 4 differential/8 single-ended inputs, 
2.7V to 5V operation, built-in 2.5V reference/buffer, and support for all three I2C modes.

The I2C address is pin-selectable with 4 options:
- 0x48 (A1=0, A0=0)
- 0x49 (A1=0, A0=1) 
- 0x4A (A1=1, A0=0)
- 0x4B (A1=1, A0=1)

Author: @anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.ti.com/lit/ds/symlink/ads7830.pdf
"""

load("@stdlib/interfaces.zen", "I2c", "Power")

# Import modules
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
I2cAddress = enum("0x48", "0x49", "0x4A", "0x4B")
ReferenceMode = enum("Internal", "External")

# I2C address mapping
address_map = {
    I2cAddress("0x48"): (False, False),  # A1=0, A0=0
    I2cAddress("0x49"): (False, True),   # A1=0, A0=1
    I2cAddress("0x4A"): (True, False),   # A1=1, A0=0
    I2cAddress("0x4B"): (True, True),    # A1=1, A0=1
}

# Configuration
add_bulk_caps = config("add_bulk_caps", bool, default = True)
add_decoupling_caps = config("add_decoupling_caps", bool, default = True)
add_analog_filtering = config("add_analog_filtering", bool, default = True)
add_test_points = config("add_test_points", bool, default = True, optional = True)

# I2C address configuration
i2c_address = config("i2c_address", I2cAddress, default = I2cAddress("0x48"))

# Reference configuration
reference_mode = config("reference_mode", ReferenceMode, default = "Internal")
if reference_mode == ReferenceMode("External"):
    external_ref_voltage = config("external_ref_voltage", str, default = "2.5V")

# I2C interface configuration
add_i2c_pullups = config("add_i2c_pullups", bool, default = True)
if add_i2c_pullups:
    i2c_pullup_value = config("i2c_pullup_value", str, default = "2kohms")

# Filter configuration for analog inputs
if add_analog_filtering:
    filter_r_value = config("filter_r_value", str, default = "50ohms")
    filter_c_value = config("filter_c_value", str, default = "10pF")

# External power supply
VDD = io("VDD", Power, default = Power(NET = Net("VDD", symbol = Symbol("@kicad-symbols/power.kicad_sym:VDD"))))
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))

# I2C interface
i2c = io("I2C", I2c)

# Analog inputs
CH0 = io("CH0", Net, default = Net("CH0"))
CH1 = io("CH1", Net, default = Net("CH1"))
CH2 = io("CH2", Net, default = Net("CH2"))
CH3 = io("CH3", Net, default = Net("CH3"))
CH4 = io("CH4", Net, default = Net("CH4"))
CH5 = io("CH5", Net, default = Net("CH5"))
CH6 = io("CH6", Net, default = Net("CH6"))
CH7 = io("CH7", Net, default = Net("CH7"))

# Common input for single-ended mode
COM = io("COM", Net, default = Net("COM"))

# External reference input (if used)
if reference_mode == ReferenceMode("External"):
    REF_EXT = io("REF_EXT", Net, default = Net("REF_EXT", symbol = Symbol("@kicad-symbols/power.kicad_sym:VCC")))

# Internal nets for filtered inputs
if add_analog_filtering:
    _CH0_FILTERED = Net("CH0_FILTERED")
    _CH1_FILTERED = Net("CH1_FILTERED")
    _CH2_FILTERED = Net("CH2_FILTERED")
    _CH3_FILTERED = Net("CH3_FILTERED")
    _CH4_FILTERED = Net("CH4_FILTERED")
    _CH5_FILTERED = Net("CH5_FILTERED")
    _CH6_FILTERED = Net("CH6_FILTERED")
    _CH7_FILTERED = Net("CH7_FILTERED")
else:
    _CH0_FILTERED = CH0
    _CH1_FILTERED = CH1
    _CH2_FILTERED = CH2
    _CH3_FILTERED = CH3
    _CH4_FILTERED = CH4
    _CH5_FILTERED = CH5
    _CH6_FILTERED = CH6
    _CH7_FILTERED = CH7

# Address pin connections based on selected I2C address
(a1_state, a0_state) = address_map[i2c_address]
_A1_NET = VDD.NET if a1_state else GND
_A0_NET = VDD.NET if a0_state else GND

# Reference pin connection
_REF_NET = Net("REF")
if reference_mode == ReferenceMode("External"):
    _REF_CONNECT = REF_EXT
    _REF_NET = REF_EXT
else:
    _REF_CONNECT = _REF_NET

# Main component
Component(
    name = "ADS7830",
    symbol = Symbol(library = "@kicad-symbols/Analog_ADC.kicad_sym", name = "ADS7828"),
    footprint = File("@kicad-footprints/Package_SO.pretty/TSSOP-16_4.4x5mm_P0.65mm.kicad_mod"),
    pins = {
        "CH0": _CH0_FILTERED,
        "CH1": _CH1_FILTERED,
        "CH2": _CH2_FILTERED,
        "CH3": _CH3_FILTERED,
        "CH4": _CH4_FILTERED,
        "CH5": _CH5_FILTERED,
        "CH6": _CH6_FILTERED,
        "CH7": _CH7_FILTERED,
        "GND": GND,
        "REF": _REF_CONNECT,
        "COM": COM,
        "A0": _A0_NET,
        "A1": _A1_NET,
        "SCL": i2c.SCL,
        "SDA": i2c.SDA,
        "VDD": VDD.NET,
    },
)

# Power supply decoupling - as per datasheet recommendation
# 0.1µF ceramic bypass capacitor close to VDD pin
Capacitor(
    name = "C_VDD",
    value = "0.1uF",
    package = "0402",
    P1 = VDD.NET,
    P2 = GND,
)

if add_decoupling_caps:
    # Additional high-frequency decoupling
    Capacitor(
        name = "C_VDD_HF",
        value = "1nF",
        package = "0402",
        P1 = VDD.NET,
        P2 = GND,
    )

# Additional bulk capacitance (1-10µF recommended)
if add_bulk_caps:
    Capacitor(
        name = "C_VDD_BULK",
        value = "10uF",
        package = "0805",
        P1 = VDD.NET,
        P2 = GND,
    )

# I2C pull-up resistors
if add_i2c_pullups:
    Resistor(
        name = "R_SCL_PULLUP",
        value = i2c_pullup_value,
        package = "0402",
        P1 = i2c.SCL,
        P2 = VDD.NET,
    )
    
    Resistor(
        name = "R_SDA_PULLUP",
        value = i2c_pullup_value,
        package = "0402",
        P1 = i2c.SDA,
        P2 = VDD.NET,
    )

# Reference capacitor for internal reference stability
if reference_mode == ReferenceMode("Internal"):
    Capacitor(
        name = "C_REF",
        value = "0.1uF",
        package = "0402",
        P1 = _REF_NET,
        P2 = GND,
    )

# Input filtering for all analog inputs
if add_analog_filtering:
    # CH0 filter
    Resistor(
        name = "R_FILTER_0",
        value = filter_r_value,
        package = "0402",
        P1 = CH0,
        P2 = _CH0_FILTERED,
    )
    Capacitor(
        name = "C_FILTER_0",
        value = filter_c_value,
        package = "0402",
        P1 = _CH0_FILTERED,
        P2 = GND,
    )
    
    # CH1 filter
    Resistor(
        name = "R_FILTER_1",
        value = filter_r_value,
        package = "0402",
        P1 = CH1,
        P2 = _CH1_FILTERED,
    )
    Capacitor(
        name = "C_FILTER_1",
        value = filter_c_value,
        package = "0402",
        P1 = _CH1_FILTERED,
        P2 = GND,
    )
    
    # CH2 filter
    Resistor(
        name = "R_FILTER_2",
        value = filter_r_value,
        package = "0402",
        P1 = CH2,
        P2 = _CH2_FILTERED,
    )
    Capacitor(
        name = "C_FILTER_2",
        value = filter_c_value,
        package = "0402",
        P1 = _CH2_FILTERED,
        P2 = GND,
    )
    
    # CH3 filter
    Resistor(
        name = "R_FILTER_3",
        value = filter_r_value,
        package = "0402",
        P1 = CH3,
        P2 = _CH3_FILTERED,
    )
    Capacitor(
        name = "C_FILTER_3",
        value = filter_c_value,
        package = "0402",
        P1 = _CH3_FILTERED,
        P2 = GND,
    )
    
    # CH4 filter
    Resistor(
        name = "R_FILTER_4",
        value = filter_r_value,
        package = "0402",
        P1 = CH4,
        P2 = _CH4_FILTERED,
    )
    Capacitor(
        name = "C_FILTER_4",
        value = filter_c_value,
        package = "0402",
        P1 = _CH4_FILTERED,
        P2 = GND,
    )
    
    # CH5 filter
    Resistor(
        name = "R_FILTER_5",
        value = filter_r_value,
        package = "0402",
        P1 = CH5,
        P2 = _CH5_FILTERED,
    )
    Capacitor(
        name = "C_FILTER_5",
        value = filter_c_value,
        package = "0402",
        P1 = _CH5_FILTERED,
        P2 = GND,
    )
    
    # CH6 filter
    Resistor(
        name = "R_FILTER_6",
        value = filter_r_value,
        package = "0402",
        P1 = CH6,
        P2 = _CH6_FILTERED,
    )
    Capacitor(
        name = "C_FILTER_6",
        value = filter_c_value,
        package = "0402",
        P1 = _CH6_FILTERED,
        P2 = GND,
    )
    
    # CH7 filter
    Resistor(
        name = "R_FILTER_7",
        value = filter_r_value,
        package = "0402",
        P1 = CH7,
        P2 = _CH7_FILTERED,
    )
    Capacitor(
        name = "C_FILTER_7",
        value = filter_c_value,
        package = "0402",
        P1 = _CH7_FILTERED,
        P2 = GND,
    )

# Test points for debugging
if add_test_points:
    TestPoint(
        name = "TP_CH0",
        variant = "Pad_D1.0mm",
        P1 = _CH0_FILTERED,
    )
    TestPoint(
        name = "TP_CH1",
        variant = "Pad_D1.0mm",
        P1 = _CH1_FILTERED,
    )
    TestPoint(
        name = "TP_CH2",
        variant = "Pad_D1.0mm",
        P1 = _CH2_FILTERED,
    )
    TestPoint(
        name = "TP_CH3",
        variant = "Pad_D1.0mm",
        P1 = _CH3_FILTERED,
    )
    TestPoint(
        name = "TP_CH4",
        variant = "Pad_D1.0mm",
        P1 = _CH4_FILTERED,
    )
    TestPoint(
        name = "TP_CH5",
        variant = "Pad_D1.0mm",
        P1 = _CH5_FILTERED,
    )
    TestPoint(
        name = "TP_CH6",
        variant = "Pad_D1.0mm",
        P1 = _CH6_FILTERED,
    )
    TestPoint(
        name = "TP_CH7",
        variant = "Pad_D1.0mm",
        P1 = _CH7_FILTERED,
    )
    TestPoint(
        name = "TP_REF",
        variant = "Pad_D1.0mm",
        P1 = _REF_NET,
    )

# pcb:sch ADS7830 x=1192.8000 y=811.8000 rot=0
# pcb:sch C_FILTER_0.C x=893.0800 y=710.2000 rot=180
# pcb:sch C_FILTER_1.C x=981.9800 y=710.2000 rot=180
# pcb:sch C_FILTER_2.C x=1070.8800 y=710.2000 rot=180
# pcb:sch C_FILTER_3.C x=1159.7800 y=710.2000 rot=180
# pcb:sch C_FILTER_4.C x=1159.7800 y=1154.7000 rot=0
# pcb:sch C_FILTER_5.C x=1070.8800 y=1154.7000 rot=0
# pcb:sch C_FILTER_6.C x=981.9800 y=1154.7000 rot=0
# pcb:sch C_FILTER_7.C x=893.0800 y=1154.7000 rot=0
# pcb:sch C_REF.C x=1464.5800 y=1065.8000 rot=0
# pcb:sch C_VDD.C x=1616.9800 y=964.2000 rot=0
# pcb:sch C_VDD_BULK.C x=1820.1800 y=964.2000 rot=0
# pcb:sch C_VDD_HF.C x=1718.5800 y=964.2000 rot=0
# pcb:sch R_FILTER_0.R x=852.4400 y=849.9000 rot=270
# pcb:sch R_FILTER_1.R x=941.3400 y=875.3000 rot=270
# pcb:sch R_FILTER_2.R x=1030.2400 y=900.7000 rot=270
# pcb:sch R_FILTER_3.R x=852.4400 y=900.7000 rot=270
# pcb:sch R_FILTER_4.R x=852.4400 y=964.2000 rot=270
# pcb:sch R_FILTER_5.R x=1030.2400 y=976.9000 rot=270
# pcb:sch R_FILTER_6.R x=941.3400 y=1002.3000 rot=270
# pcb:sch R_FILTER_7.R x=852.4400 y=1027.7000 rot=270
# pcb:sch R_SCL_PULLUP.R x=1538.2400 y=799.1000 rot=180
# pcb:sch R_SDA_PULLUP.R x=1462.0400 y=799.1000 rot=180
# pcb:sch TP_CH0.TP x=893.0800 y=783.8600 rot=270
# pcb:sch TP_CH1.TP x=981.9800 y=783.8600 rot=270
# pcb:sch TP_CH2.TP x=1070.8800 y=783.8600 rot=270
# pcb:sch TP_CH3.TP x=1159.7800 y=783.8600 rot=270
# pcb:sch TP_CH4.TP x=1159.7800 y=1088.6600 rot=270
# pcb:sch TP_CH5.TP x=1070.8800 y=1088.6600 rot=270
# pcb:sch TP_CH6.TP x=981.9800 y=1088.6600 rot=270
# pcb:sch TP_CH7.TP x=893.0800 y=1088.6600 rot=270
# pcb:sch TP_REF.TP x=1502.6800 y=948.9600 rot=90
# pcb:sch GND.1 x=1281.7000 y=1269.0000 rot=0
# pcb:sch GND.2 x=1040.4000 y=659.4000 rot=2
# pcb:sch VDD.1 x=1286.7800 y=748.3000 rot=0
# pcb:sch ADS7830 x=1192.8000 y=811.8000 rot=0
# pcb:sch REF_EXT.1 x=1413.7800 y=735.6000 rot=0