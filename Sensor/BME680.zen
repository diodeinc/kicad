"""BME680 - Low power gas, pressure, temperature & humidity sensor

The BME680 is a digital 4-in-1 sensor with gas, humidity, pressure and temperature 
measurement based on proven sensing principles. The sensor module is housed in an 
extremely compact metal-lid LGA package with a footprint of only 3.0×3.0×0.93mm. 
It features ultra-low power consumption enabling integration in battery-powered or 
frequency-coupled devices. The sensor supports both I²C (up to 3.4 MHz) and SPI 
(3/4-wire, up to 10 MHz) interfaces and operates from 1.71V to 3.6V supply.

Key features:
- Gas sensor: VOC detection with IAQ output, response time <1s
- Humidity sensing: 0-100% RH, ±3% accuracy, 8s response time
- Pressure sensing: 300-1100 hPa, ±0.6 hPa accuracy
- Temperature sensing: -40 to +85°C, ±0.5°C accuracy at 25°C
- Ultra-low power: 0.15μA in sleep mode, 2.1μA for humidity/temperature
- Digital interfaces: I²C and SPI with configurable modes

Author: @@anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.bosch-sensortec.com/media/boschsensortec/downloads/datasheets/bst-bme680-ds001.pdf
"""

load("@stdlib/interfaces.zen", "I2c", "Spi", "Power")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Configuration Types
InterfaceMode = enum("I2C", "SPI_4Wire", "SPI_3Wire")
I2cAddress = enum("0x76", "0x77")

# Configuration
interface_mode = config("interface_mode", InterfaceMode, default = "I2C")
if interface_mode == InterfaceMode("I2C"):
    i2c_address = config("i2c_address", I2cAddress, default = "0x76")
    add_i2c_pullups = config("add_i2c_pullups", bool, default = True)
    i2c_pullup_value = config("i2c_pullup_value", str, default = "4.7kohms")

add_vddio_separation = config("add_vddio_separation", bool, default = True)
add_power_decoupling = config("add_power_decoupling", bool, default = True)
add_test_points = config("add_test_points", bool, default = True)

# External IO
VDD = io("VDD", Power)
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))

# VDDIO - can be same as VDD or separate
if add_vddio_separation:
    VDDIO = io("VDDIO", Power)
else:
    VDDIO = VDD

# Interface IO based on configuration
if interface_mode == InterfaceMode("I2C"):
    i2c = io("I2C", I2c)
elif interface_mode == InterfaceMode("SPI_4Wire") or interface_mode == InterfaceMode("SPI_3Wire"):
    spi = io("SPI", Spi)

# Internal nets - assigned based on interface mode
if interface_mode == InterfaceMode("I2C"):
    # I2C Mode Configuration
    _SCK = i2c.SCL
    _SDI = i2c.SDA  # SDI is bidirectional SDA in I2C mode
    _SDO = GND if i2c_address == I2cAddress("0x76") else VDDIO.NET  # I2C address selection
    _CSB = VDDIO.NET  # CSB must be tied to VDDIO for I2C mode
elif interface_mode == InterfaceMode("SPI_4Wire"):
    # 4-Wire SPI Mode Configuration
    _SCK = spi.CLK
    _SDI = spi.MOSI
    _SDO = spi.MISO
    _CSB = spi.CS
elif interface_mode == InterfaceMode("SPI_3Wire"):
    # 3-Wire SPI Mode Configuration
    # Note: In 3-wire mode, SDI and SDO share the same line
    # External logic or careful software control is required
    _SCK = spi.CLK
    _SDI = spi.MOSI
    _SDO = spi.MOSI  # Same line for 3-wire mode (bidirectional)
    _CSB = spi.CS

# Main BME680 Component
Component(
    name = "BME680",
    symbol = Symbol(library = "@kicad-symbols/Sensor.kicad_sym", name = "BME680"),
    footprint = File("@kicad-footprints/Package_LGA.pretty/Bosch_LGA-8_3x3mm_P0.8mm_ClockwisePinNumbering.kicad_mod"),
    pins = {
        "GND": GND,      # Pin 1
        "CSB": _CSB,     # Pin 2
        "SDI": _SDI,     # Pin 3
        "SCK": _SCK,     # Pin 4
        "SDO": _SDO,     # Pin 5
        "VDDIO": VDDIO.NET,  # Pin 6
        "VDD": VDD.NET       # Pin 8
        # Pin 7 is also GND but not exposed in symbol
    }
)

# I2C pull-up resistors (required for I2C operation)
if interface_mode == InterfaceMode("I2C") and add_i2c_pullups:
    Resistor(name = "R_SCL", value = i2c_pullup_value, package = "0402", P1 = i2c.SCL, P2 = VDDIO.NET)
    Resistor(name = "R_SDA", value = i2c_pullup_value, package = "0402", P1 = i2c.SDA, P2 = VDDIO.NET)

# Power Supply Decoupling
if add_power_decoupling:
    # VDD decoupling - place close to pin 8
    Capacitor(name = "C_VDD", value = "100nF", package = "0402", P1 = VDD.NET, P2 = GND)
    
    # VDDIO decoupling - place close to pin 6
    if add_vddio_separation:
        Capacitor(name = "C_VDDIO", value = "100nF", package = "0402", P1 = VDDIO.NET, P2 = GND)

# Test Points (optional)
if add_test_points:
    if interface_mode == InterfaceMode("I2C"):
        TestPoint(name = "TP_SCL", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = i2c.SCL)
        TestPoint(name = "TP_SDA", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = i2c.SDA)
    else:
        TestPoint(name = "TP_SCK", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = _SCK)
        TestPoint(name = "TP_SDI", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = _SDI)
        TestPoint(name = "TP_SDO", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = _SDO)
        TestPoint(name = "TP_CSB", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = _CSB)

# pcb:sch BME680 x=367.3000 y=49.8000 rot=0
# pcb:sch C_VDD.C x=245.3800 y=164.1000 rot=0
# pcb:sch R_SCL.R x=712.7400 y=87.9000 rot=180
# pcb:sch R_SDA.R x=788.9400 y=87.9000 rot=180
# pcb:sch GND.1 x=456.2000 y=392.7000 rot=0
# pcb:sch VCC.1 x=461.2800 y=-1.0000 rot=0
# pcb:sch C_VDDIO.C x=156.4800 y=164.1000 rot=0
# pcb:sch VDD.VCC.1 x=486.6800 y=-26.4000 rot=0
# pcb:sch VDDIO.VCC.1 x=169.1800 y=-26.4000 rot=0
# pcb:sch TP_SCL.TP x=715.2800 y=313.9600 rot=180
# pcb:sch TP_SDA.TP x=791.4800 y=313.9600 rot=180
# pcb:sch TP_CSB.TP x=854.9800 y=219.9800 rot=0
# pcb:sch TP_SCK.TP x=753.3800 y=118.3800 rot=0
# pcb:sch TP_SDI.TP x=804.1800 y=169.1800 rot=0
# pcb:sch TP_SDO.TP x=702.5800 y=67.5800 rot=0