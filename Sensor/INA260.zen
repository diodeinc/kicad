"""INA260 - Precision Digital Current and Power Monitor With Low-Drift, Precision Integrated Shunt

The INA260 is a digital-output, current, power, and voltage monitor with an I²C and SMBus-compatible 
interface with an integrated precision 2mΩ shunt resistor. It enables high-accuracy current and power 
measurements and over-current detection at common-mode voltages that can vary from 0V to 36V, 
independent of the supply voltage. The device features up to 16 programmable addresses, digital 
averaging, programmable alert thresholds, and operates from a 2.7V to 5.5V supply.

Configuration options:
- connect_vbus_to_in_plus: When enabled, VBUS is internally connected to IN_PLUS for single-point 
  bus voltage measurement. VBUS filtering is disabled when this option is enabled.

Author: @@anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.ti.com/lit/ds/sbos893c/sbos893c.pdf
"""

load("@stdlib/interfaces.zen", "I2c", "Power")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
FerriteBead = Module("@stdlib/generics/FerriteBead.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
I2cAddress = enum("0x40", "0x41", "0x42", "0x43", "0x44", "0x45", "0x46", "0x47",
                  "0x48", "0x49", "0x4A", "0x4B", "0x4C", "0x4D", "0x4E", "0x4F")
AlertFunction = enum("None", "OverCurrent", "UnderCurrent", "BusOverVoltage", "BusUnderVoltage", "PowerOverLimit")

# Configuration
add_decoupling = config("add_decoupling", bool, default = True)
add_input_filtering = config("add_input_filtering", bool, default = True)
add_bulk_cap = config("add_bulk_cap", bool, default = True)
add_i2c_pullups = config("add_i2c_pullups", bool, default = True)
add_alert_pullup = config("add_alert_pullup", bool, default = True)
add_test_points = config("add_test_points", bool, default = False)
connect_vbus_to_in_plus = config("connect_vbus_to_in_plus", bool, default = True)

# I2C configuration
i2c_address = config("i2c_address", I2cAddress, default = "0x40")
i2c_pullup_value = config("i2c_pullup_value", str, default = "4.7kohms")

# Alert configuration
alert_function = config("alert_function", AlertFunction, default = "OverCurrent")
if alert_function != AlertFunction("None"): 
    alert_pullup_value = config("alert_pullup_value", str, default = "10kohms")
else:
    alert_pullup_value = "0ohms"

# Input filter configuration
if add_input_filtering:
    input_filter_r = config("input_filter_r", str, default = "10ohms")
    input_filter_c = config("input_filter_c", str, default = "100nF")

# Address mapping dictionary
address_map = {
    I2cAddress("0x40"): ("GND", "GND"),
    I2cAddress("0x41"): ("GND", "VS"),
    I2cAddress("0x42"): ("GND", "SDA"),
    I2cAddress("0x43"): ("GND", "SCL"),
    I2cAddress("0x44"): ("VS", "GND"),
    I2cAddress("0x45"): ("VS", "VS"),
    I2cAddress("0x46"): ("VS", "SDA"),
    I2cAddress("0x47"): ("VS", "SCL"),
    I2cAddress("0x48"): ("SDA", "GND"),
    I2cAddress("0x49"): ("SDA", "VS"),
    I2cAddress("0x4A"): ("SDA", "SDA"),
    I2cAddress("0x4B"): ("SDA", "SCL"),
    I2cAddress("0x4C"): ("SCL", "GND"),
    I2cAddress("0x4D"): ("SCL", "VS"),
    I2cAddress("0x4E"): ("SCL", "SDA"),
    I2cAddress("0x4F"): ("SCL", "SCL"),
}

# Get the pin connections for the selected address
a1_conn, a0_conn = address_map[i2c_address]

# External IO
VS = io("VS", Power)  # Power supply (2.7-5.5V)
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))
i2c = io("I2C", I2c)  # I2C communication interface

# Current path pins
IN_PLUS = io("IN_PLUS", Net)  # High current input (connect to power source or load)
IN_MINUS = io("IN_MINUS", Net)  # Low current input (connect to load or ground)

# Bus voltage monitoring pin
if connect_vbus_to_in_plus:
    VBUS = IN_PLUS  # VBUS tied to IN+ for single-point measurement
else:
    VBUS = io("VBUS", Net)  # Bus voltage sense input (0-36V)

# Alert pin
if alert_function != AlertFunction("None"):
    ALERT = io("ALERT", Net)  # Alert output (open-drain)
else:
    ALERT = Net("ALERT")  # Internal net if not used

# Internal nets for filtered inputs
_IN_PLUS_FILT = Net("IN_PLUS_FILT") if add_input_filtering else IN_PLUS
_IN_MINUS_FILT = Net("IN_MINUS_FILT") if add_input_filtering else IN_MINUS
# When VBUS is connected to IN_PLUS, it gets filtered through IN_PLUS filtering
_VBUS_FILT = Net("VBUS_FILT") if (add_input_filtering and not connect_vbus_to_in_plus) else VBUS

# Address pin nets
if a1_conn == "VS":
    _A1 = VS.NET
elif a1_conn == "SDA":
    _A1 = i2c.SDA
elif a1_conn == "SCL":
    _A1 = i2c.SCL
else:  # GND
    _A1 = GND

if a0_conn == "VS":
    _A0 = VS.NET
elif a0_conn == "SDA":
    _A0 = i2c.SDA
elif a0_conn == "SCL":
    _A0 = i2c.SCL
else:  # GND
    _A0 = GND

# Main component
Component(
    name = "INA260",
    symbol = Symbol(library = "@kicad-symbols/Sensor.kicad_sym", name = "INA260"),
    footprint = File("@kicad-footprints/Package_SO.pretty/TSSOP-16_4.4x5mm_P0.65mm.kicad_mod"),
    pins = {
        "IN+": _IN_PLUS_FILT,
        "IN-": _IN_MINUS_FILT,
        "VBUS": _VBUS_FILT,
        "VS": VS.NET,
        "GND": GND,
        "NC": Net("NC"),  # No connect
        "ALERT": ALERT,
        "SCL": i2c.SCL,
        "SDA": i2c.SDA,
        "A0": _A0,
        "A1": _A1
    },
)

# Power supply decoupling
if add_decoupling:
    # Local ceramic capacitor
    Capacitor(
        name = "C_VS",
        value = "100nF",
        voltage = "10V",
        package = "0402",
        P1 = VS.NET,
        P2 = GND
    )

# Bulk capacitor
if add_bulk_cap:
    Capacitor(
        name = "C_BULK",
        value = "10uF",
        voltage = "10V",
        package = "0805",
        P1 = VS.NET,
        P2 = GND
    )

# Input filtering for current sense pins
if add_input_filtering:
    # Series resistors for dV/dt protection
    Resistor(
        name = "R_IN_PLUS",
        value = input_filter_r,
        package = "0402",
        P1 = IN_PLUS,
        P2 = _IN_PLUS_FILT
    )
    
    Resistor(
        name = "R_IN_MINUS",
        value = input_filter_r,
        package = "0402",
        P1 = IN_MINUS,
        P2 = _IN_MINUS_FILT
    )
    
    # Filter capacitors
    Capacitor(
        name = "C_IN_PLUS",
        value = input_filter_c,
        voltage = "50V",
        package = "0402",
        P1 = _IN_PLUS_FILT,
        P2 = GND
    )
    
    Capacitor(
        name = "C_IN_MINUS",
        value = input_filter_c,
        voltage = "50V",
        package = "0402",
        P1 = _IN_MINUS_FILT,
        P2 = GND
    )
    
    # VBUS input filtering (only if VBUS is not connected to IN_PLUS)
    if not connect_vbus_to_in_plus:
        Resistor(
            name = "R_VBUS",
            value = input_filter_r,
            package = "0402",
            P1 = VBUS,
            P2 = _VBUS_FILT
        )
        
        Capacitor(
            name = "C_VBUS",
            value = "10nF",
            voltage = "50V",
            package = "0402",
            P1 = _VBUS_FILT,
            P2 = GND
        )

# I2C pull-up resistors
if add_i2c_pullups:
    Resistor(
        name = "R_SDA",
        value = i2c_pullup_value,
        package = "0402",
        P1 = i2c.SDA,
        P2 = VS.NET
    )
    
    Resistor(
        name = "R_SCL",
        value = i2c_pullup_value,
        package = "0402",
        P1 = i2c.SCL,
        P2 = VS.NET
    )

# Alert pull-up resistor
if alert_function != AlertFunction("None") and add_alert_pullup:
    Resistor(
        name = "R_ALERT",
        value = alert_pullup_value,
        package = "0402",
        P1 = ALERT,
        P2 = VS.NET
    )

# Test points
if add_test_points:
    TestPoint(
        name = "TP_IN_PLUS",
        variant = "Pad_D1.5mm",
        P1 = IN_PLUS
    )
    
    TestPoint(
        name = "TP_IN_MINUS",
        variant = "Pad_D1.5mm",
        P1 = IN_MINUS
    )
    
    # Only add VBUS test point if VBUS is not connected to IN_PLUS
    if not connect_vbus_to_in_plus:
        TestPoint(
            name = "TP_VBUS",
            variant = "Pad_D1.5mm",
            P1 = VBUS
        )
    
    TestPoint(
        name = "TP_VS",
        variant = "Pad_D1.5mm",
        P1 = VS.NET
    )

# pcb:sch C_BULK.C x=600.9800 y=354.6000 rot=0
# pcb:sch C_IN_MINUS.C x=4.0800 y=468.9000 rot=0
# pcb:sch C_IN_PLUS.C x=4.0800 y=265.7000 rot=180
# pcb:sch C_VBUS.C x=131.0800 y=265.7000 rot=180
# pcb:sch C_VS.C x=727.9800 y=354.6000 rot=0
# pcb:sch INA260 x=176.8000 y=303.8000 rot=0
# pcb:sch R_IN_MINUS.R x=-36.5600 y=418.1000 rot=270
# pcb:sch R_IN_PLUS.R x=-36.5600 y=316.5000 rot=270
# pcb:sch R_SCL.R x=496.8400 y=265.7000 rot=180
# pcb:sch R_SDA.R x=560.3400 y=265.7000 rot=180
# pcb:sch R_VBUS.R x=-125.4600 y=341.9000 rot=270
# pcb:sch TP_IN_MINUS.TP x=-84.8200 y=453.6600 rot=180
# pcb:sch TP_IN_PLUS.TP x=-84.8200 y=275.8600 rot=0
# pcb:sch TP_VBUS.TP x=-173.7200 y=275.8600 rot=0
# pcb:sch TP_VS.TP x=321.5800 y=174.2600 rot=0
# pcb:sch GND.1 x=265.7000 y=570.5000 rot=0
# pcb:sch GND.2 x=138.7000 y=202.2000 rot=180
# pcb:sch VCC.1 x=270.7800 y=176.8000 rot=0
# pcb:sch R_ALERT.R x=433.3400 y=265.7000 rot=180