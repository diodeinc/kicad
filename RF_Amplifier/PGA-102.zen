"""PGA-102+ - High Dynamic Range Monolithic Amplifier

The PGA-102+ is a wideband E-PHEMT amplifier offering extremely high dynamic 
range from 50 MHz to 6 GHz. It features 15.9 dB typical gain at 800 MHz, 
+33 dBm output IP3 at 2 GHz, and a low noise figure of 2.3 dB. The device 
operates from a single 3.3V supply with 83mA typical current consumption and 
requires no external matching components. It provides excellent input and 
output return loss across the full frequency range. The amplifier is housed 
in a SOT-89 package for good thermal performance and is ideal for base 
station infrastructure, CATV, wireless LAN, and LTE applications.

Key specifications:
- Frequency range: 50 MHz to 6 GHz
- Gain: 14.0 dB typical at 2 GHz
- Output P1dB: 17.5 dBm typical at 2 GHz
- Output IP3: 33 dBm typical at 2 GHz
- Noise figure: 2.4 dB typical at 2 GHz
- Supply: 3.3V @ 83mA typical

Author: @anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.minicircuits.com/pdfs/PGA-102+.pdf
"""

load("@stdlib/interfaces.zen", "Power")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
Inductor = Module("@stdlib/generics/Inductor.zen")
FerriteBead = Module("@stdlib/generics/FerriteBead.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
BiasMethod = enum("BiasTee", "Resistor")
InputCouplingFreq = enum("LowFreq", "MidFreq", "HighFreq")
OutputCouplingFreq = enum("LowFreq", "MidFreq", "HighFreq")

# Configuration
# Power supply configuration
add_supply_filtering = config("add_supply_filtering", bool, default = True)
add_ferrite_bead = config("add_ferrite_bead", bool, default = True)
add_bulk_cap = config("add_bulk_cap", bool, default = True)
add_decoupling = config("add_decoupling", bool, default = True)

# Bias configuration
bias_method = config("bias_method", BiasMethod, default = "Resistor")
if bias_method == BiasMethod("BiasTee"):
    bias_inductor_value = config("bias_inductor_value", str, default = "100nH")
elif bias_method == BiasMethod("Resistor"):
    bias_resistor_value = config("bias_resistor_value", str, default = "100ohms")

# Coupling capacitor configuration
input_coupling_freq = config("input_coupling_freq", InputCouplingFreq, default = "LowFreq")
output_coupling_freq = config("output_coupling_freq", OutputCouplingFreq, default = "LowFreq")

# Protection configuration
add_input_protection = config("add_input_protection", bool, default = True)
add_output_protection = config("add_output_protection", bool, default = True)

# Test points
add_test_points = config("add_test_points", bool, default = True)

# External IO
VDD = io("VDD", Power, default = Power("VDD"))
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))
RFIN = io("RFIN", Net)
RFOUT = io("RFOUT", Net)

# Internal nets
_VDD_FILT = Net("VDD_FILT")  # Filtered power supply
_RFIN_INT = Net("RFIN_INT")  # Internal RF input after DC blocking
_RFOUT_INT = Net("RFOUT_INT")  # Internal RF output before DC blocking
_BIAS_NODE = Net("BIAS_NODE")  # Bias injection point

# Power supply filtering
if add_ferrite_bead:
    FerriteBead(name = "FB1", package = "0805", P1 = VDD.NET, P2 = _VDD_FILT)
else:
    _VDD_FILT = VDD.NET

# Bulk capacitor - use 0.1uF as per datasheet
if add_bulk_cap:
    Capacitor(name = "C_BULK", value = "100nF", voltage = "10V", package = "0805", P1 = _VDD_FILT, P2 = GND)

# Decoupling capacitors
if add_decoupling:
    Capacitor(name = "C_DEC1", value = "100nF", voltage = "10V", package = "0402", P1 = _VDD_FILT, P2 = GND)
    Capacitor(name = "C_DEC2", value = "1nF", voltage = "10V", package = "0402", P1 = _VDD_FILT, P2 = GND)
    Capacitor(name = "C_DEC3", value = "100pF", voltage = "10V", package = "0402", P1 = _VDD_FILT, P2 = GND)

# Main component - corrected pin assignments based on datasheet
Component(
    name = "U1",
    symbol = Symbol(library = "@kicad-symbols/RF_Amplifier.kicad_sym", name = "PGA-102"),
    footprint = File("@kicad-footprints/Package_TO_SOT_SMD.pretty/SOT-89-3.kicad_mod"),
    pins = {
        "1": _RFIN_INT,     # RF input
        "GND": GND,         # Ground
        "3": _BIAS_NODE     # RF output and DC bias
    }
)

# Input coupling capacitor - use 1nF as per datasheet recommended application circuit
if input_coupling_freq == InputCouplingFreq("LowFreq"):
    # For operation down to 50 MHz
    input_cap_value = "1nF"
elif input_coupling_freq == InputCouplingFreq("MidFreq"):
    # For operation from 500 MHz
    input_cap_value = "100pF"
else:  # HighFreq
    # For operation above 2 GHz
    input_cap_value = "10pF"

Capacitor(name = "C_IN", value = input_cap_value, voltage = "50V", package = "0402", P1 = RFIN, P2 = _RFIN_INT)

# Output coupling capacitor - use 1nF as per datasheet recommended application circuit
if output_coupling_freq == OutputCouplingFreq("LowFreq"):
    # For operation down to 50 MHz
    output_cap_value = "1nF"
elif output_coupling_freq == OutputCouplingFreq("MidFreq"):
    # For operation from 500 MHz
    output_cap_value = "100pF"
else:  # HighFreq
    # For operation above 2 GHz
    output_cap_value = "10pF"

Capacitor(name = "C_OUT", value = output_cap_value, voltage = "50V", package = "0402", P1 = _BIAS_NODE, P2 = _RFOUT_INT)

# Bias circuit
if bias_method == BiasMethod("BiasTee"):
    # RF choke for bias injection (bias tee configuration)
    Inductor(name = "L_BIAS", value = bias_inductor_value, package = "0603", P1 = _VDD_FILT, P2 = _BIAS_NODE)
elif bias_method == BiasMethod("Resistor"):
    # Resistive bias (for lower frequency applications)
    Resistor(name = "R_BIAS", value = bias_resistor_value, package = "0402", P1 = _VDD_FILT, P2 = _BIAS_NODE)
    # Additional bypass capacitor at bias node
    Capacitor(name = "C_BIAS", value = "100nF", voltage = "10V", package = "0402", P1 = _BIAS_NODE, P2 = GND)

# Input protection (optional)
if add_input_protection:
    # ESD protection diode for input
    Component(
        name = "D_IN",
        symbol = Symbol(library = "@kicad-symbols/Diode.kicad_sym", name = "ESD9B5.0ST5G"),
        footprint = File("@kicad-footprints/Diode_SMD.pretty/D_0402_1005Metric.kicad_mod"),
        pins = {
            "A1": _RFIN_INT,
            "A2": GND
        }
    )

# Output protection (optional)
if add_output_protection:
    # ESD protection diode for output
    Component(
        name = "D_OUT",
        symbol = Symbol(library = "@kicad-symbols/Diode.kicad_sym", name = "ESD9B5.0ST5G"),
        footprint = File("@kicad-footprints/Diode_SMD.pretty/D_0402_1005Metric.kicad_mod"),
        pins = {
            "A1": _RFOUT_INT,
            "A2": GND
        }
    )

# Connect output
_RFOUT_INT = RFOUT

# Test points
if add_test_points:
    TestPoint(name = "TP_VDD", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = _VDD_FILT)
    TestPoint(name = "TP_BIAS", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = _BIAS_NODE)
    TestPoint(name = "TP_GND", variant = "THTPad_D1.0mm_Drill0.5mm", P1 = GND)

# PCB placement hints
# pcb:sch U1 x=481.6000 y=468.9000 rot=0
# pcb:sch C_IN.C x=372.3800 y=481.6000 rot=270
# pcb:sch C_OUT.C x=816.8800 y=608.6000 rot=270
# pcb:sch L_BIAS.L x=748.2991 y=418.1000 rot=0
# pcb:sch C_BULK.C x=816.8800 y=418.1000 rot=0
# pcb:sch C_DEC1.C x=956.5800 y=418.1000 rot=0
# pcb:sch C_DEC2.C x=1096.2800 y=418.1000 rot=0
# pcb:sch C_DEC3.C x=1210.5800 y=418.1000 rot=0
# pcb:sch FB1.FB x=631.7140 y=354.6000 rot=270
# pcb:sch GND.1 x=519.7000 y=634.0000 rot=0
# pcb:sch GND.2 x=824.5000 y=532.4000 rot=0
# pcb:sch VDD.1 x=100.0000 y=200.0000 rot=0
# pcb:sch TP_VDD.TP x=740.6800 y=288.5600 rot=0
# pcb:sch TP_BIAS.TP x=651.7800 y=567.9600 rot=180
# pcb:sch TP_GND.TP x=550.1800 y=580.6600 rot=90
# pcb:sch VDD_VCC.1 x=600.9800 y=291.1000 rot=0
# pcb:sch C_BIAS.C x=753.3800 y=481.6000 rot=270
# pcb:sch R_BIAS.R x=700.0400 y=405.4000 rot=0
# pcb:sch D_IN x=405.4000 y=557.8000 rot=90
# pcb:sch D_OUT x=938.8000 y=570.5000 rot=270