"""TLV493D - Low Power 3D Magnetic Sensor with I²C Interface

The TLV493D is a low-power 3D magnetic sensor that detects magnetic fields in 
three dimensions (X, Y, and Z). It features an extremely low power consumption 
of 10μA in ultra-low power mode, making it ideal for battery-powered applications. 
The sensor provides 12-bit resolution for each axis with a measurement range of 
±130mT and communicates via I²C interface up to 1MHz. It includes an integrated 
temperature sensor, interrupt capability, and configurable power modes. Perfect 
for joysticks, control elements, position detection, and anti-tampering applications.

Author: @@anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: http://www.infineon.com/dgdl/Infineon-TLV493D-A1B6-DS-v01_00-EN.pdf?fileId=5546d462525dbac40152a6b85c760e80
"""

load("@stdlib/interfaces.zen", "I2c")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")

# Types
I2cAddress = enum("0x5E", "0xBE")
I2cSpeed = enum("400kHz", "1MHz")

# Configuration
add_decoupling = config("add_decoupling", bool, default = True)
add_bulk_cap = config("add_bulk_cap", bool, default = True)
add_i2c_pullups = config("add_i2c_pullups", bool, default = True)
add_emc_protection = config("add_emc_protection", bool, default = True)
enable_interrupt = config("enable_interrupt", bool, default = False)
configure_i2c_address = config("configure_i2c_address", bool, default = False)
if configure_i2c_address:
    i2c_address = config("i2c_address", I2cAddress, default = "0x5E")
i2c_speed = config("i2c_speed", I2cSpeed, default = "400kHz")

# External IO
VDD = io("VDD", Net, default = Net("VDD", symbol = Symbol("@kicad-symbols/power.kicad_sym:+3V3")))
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))
i2c = io("I2C", I2c, default = I2c())

# Optional interrupt output
if enable_interrupt:
    INT = io("INT", Net)

# Main component - Low power 3D magnetic sensor, I2C interface, SOT-23-6
Component(
    name = "TLV493D",
    symbol = Symbol(library = "@kicad-symbols/Sensor_Magnetic.kicad_sym", name = "TLV493D"),
    footprint = File("@kicad-footprints/Package_TO_SOT_SMD.pretty/SOT-23-6.kicad_mod"),
    pins = {
        "SCL/INT": i2c.SCL if not enable_interrupt else INT,
        "GND": GND,
        "VDD": VDD,
        "SDA/ADDR": i2c.SDA
    },
)

# Address configuration
# During power-up, voltage on SDA/ADDR pin determines I2C address
# Low = 0x5E, High = 0xBE
if configure_i2c_address:
    if i2c_address == I2cAddress("0xBE"):
    # Pull-up to set address to 0xBE
        Resistor(
            name = "R_ADDR",
            value = "10kohms",
            package = "0603",
            P1 = i2c.SDA,
            P2 = VDD
        )
    else:
    # Pull-down to set address to 0x5E
        Resistor(
            name = "R_ADDR",
            value = "10kohms",
            package = "0603",
            P1 = i2c.SDA,
            P2 = GND
        )

# Optional EMC protection components
if add_emc_protection:
    # Series resistors on I2C lines to reduce reflections and EMC
    # Note: These may limit maximum I2C speed
    _SCL_PROT = Net("SCL_PROT")
    _SDA_PROT = Net("SDA_PROT")
    
    Resistor(
        name = "R_SCL_SERIES",
        value = "22ohms",
        package = "0603",
        P1 = i2c.SCL,
        P2 = _SCL_PROT
    )
    
    Resistor(
        name = "R_SDA_SERIES",
        value = "22ohms",
        package = "0603",
        P1 = i2c.SDA,
        P2 = _SDA_PROT
    )
    
    # EMC filter capacitor on SCL (limits max bitrate)
    # Only add if EMC is critical and lower I2C speeds are acceptable
    Capacitor(
        name = "C_SCL_FILTER",
        value = "100pF",
        voltage = "50V",
        package = "0603",
        P1 = _SCL_PROT,
        P2 = GND
    )
    
    # I2C pull-up resistors connect to protected side
    if add_i2c_pullups:
        # Pull-up values depend on I2C speed and bus capacitance
        pullup_value = "2.2kohms" if i2c_speed == I2cSpeed("400kHz") else "1kohms"
        
        Resistor(
            name = "R_SCL_PULLUP",
            value = pullup_value,
            package = "0603",
            P1 = _SCL_PROT,
            P2 = VDD
        )
        
        Resistor(
            name = "R_SDA_PULLUP",
            value = pullup_value,
            package = "0603",
            P1 = _SDA_PROT,
            P2 = VDD
        )
else:
    # I2C pull-up resistors without EMC protection
    if add_i2c_pullups:
        # Pull-up values depend on I2C speed and bus capacitance
        pullup_value = "2.2kohms" if i2c_speed == I2cSpeed("400kHz") else "1kohms"
        
        Resistor(
            name = "R_SCL_PULLUP",
            value = pullup_value,
            package = "0603",
            P1 = i2c.SCL,
            P2 = VDD
        )
        
        Resistor(
            name = "R_SDA_PULLUP",
            value = pullup_value,
            package = "0603",
            P1 = i2c.SDA,
            P2 = VDD
        )

# Power supply decoupling
if add_decoupling:
    # Place close to VDD pin - critical for stable operation
    Capacitor(
        name = "C_VDD",
        value = "100nF",
        voltage = "10V",
        package = "0603",
        P1 = VDD,
        P2 = GND
    )

# Bulk capacitor for better noise immunity
if add_bulk_cap:
    Capacitor(
        name = "C_BULK",
        value = "1uF",
        voltage = "10V",
        package = "0805",
        P1 = VDD,
        P2 = GND
    )
    

# pcb:sch C_BULK.C x=435.8800 y=3008.9000 rot=0
# pcb:sch C_VDD.C x=296.1800 y=3008.9000 rot=0
# pcb:sch R_ADDR.R x=-138.1600 y=3097.8000 rot=0
# pcb:sch R_SCL_PULLUP.R x=-49.2600 y=2932.7000 rot=180
# pcb:sch R_SDA_PULLUP.R x=-201.6600 y=2932.7000 rot=180
# pcb:sch TLV493D x=100.6000 y=2932.7000 rot=0
# pcb:sch GND.1 x=189.5000 y=3199.4000 rot=0
# pcb:sch VDD.1 x=194.5800 y=2881.9000 rot=0
# pcb:sch R_SCL_SERIES.R x=14.2400 y=2996.2000 rot=90
# pcb:sch R_SDA_SERIES.R x=-125.4600 y=3021.6000 rot=90
# pcb:sch C_SCL_FILTER.C x=-59.4200 y=3085.1000 rot=0