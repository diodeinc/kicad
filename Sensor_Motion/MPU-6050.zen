"""MPU-6050 - 6-Axis Motion Sensor with Gyroscope and Accelerometer

The MPU-6050 is the world's first integrated 6-axis MotionTracking device that combines 
a 3-axis gyroscope, 3-axis accelerometer, and a Digital Motion Processor (DMP) all in a 
small 4×4×0.9mm package. It features three 16-bit analog-to-digital converters (ADCs) 
for digitizing the gyroscope outputs and three 16-bit ADCs for digitizing the accelerometer 
outputs. The device includes an embedded temperature sensor, an on-chip oscillator with 
±1% variation over the operating temperature range, and a 1024-byte FIFO buffer.

Author: @Anthropic/claude-opus-4-20250514
Reviewer: Nasheed Ur Rehman
Datasheet: https://invensense.tdk.com/wp-content/uploads/2015/02/MPU-6000-Datasheet1.pdf
"""

load("@stdlib/interfaces.zen", "I2c")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")

# Types
I2cAddress = enum("0x68", "0x69")

# Configuration
add_decoupling = config("add_decoupling", bool, default = True)
add_regout_cap = config("add_regout_cap", bool, default = True)
add_cpout_cap = config("add_cpout_cap", bool, default = True)
add_vlogic_cap = config("add_vlogic_cap", bool, default = True)
add_i2c_pullups = config("add_i2c_pullups", bool, default = True)
i2c_address = config("i2c_address", I2cAddress, default = "0x68")
enable_interrupt = config("enable_interrupt", bool, default = True)

# External IO
i2c = io("I2C", I2c, default = I2c("I2C"))
VDD = io("VDD", Net, default = Net("VDD", symbol = Symbol("@kicad-symbols/power.kicad_sym:VDD")))
VLOGIC = io("VLOGIC", Net, default = VDD)
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))
INT = io("INT", Net, default = Net("INT")) if enable_interrupt else None

# Optional external clock input
CLKIN = io("CLKIN", Net, default = GND)

# Optional frame sync input
FSYNC = io("FSYNC", Net, default = GND)

# Auxiliary I2C interface (optional)
AUX_DA = io("AUX_DA", Net, default = Net("AUX_DA"), optional = True)
AUX_CL = io("AUX_CL", Net, default = Net("AUX_CL"), optional = True)

# Internal nets
_AD0 = GND if i2c_address == I2cAddress("0x68") else VDD
_REGOUT = Net("REGOUT")
_CPOUT = Net("CPOUT")

# Reserved pins - must not be connected
_RESV = Net("RESV")

# Handle conditional nets
_INT = INT if enable_interrupt else Net("NC_INT")
_AUX_DA = AUX_DA if AUX_DA else Net("NC_AUX_DA")
_AUX_CL = AUX_CL if AUX_CL else Net("NC_AUX_CL")

# I2C interface nets
_SDA = i2c.SDA
_SCL = i2c.SCL

# InvenSense 6-Axis Motion Sensor, Gyroscope, Accelerometer, I2C
Component(
    name = "MPU-6050",
    symbol = Symbol(library = "@kicad-symbols/Sensor_Motion.kicad_sym", name = "MPU-6050"),
    footprint = File("@kicad-footprints/Sensor_Motion.pretty/InvenSense_QFN-24_4x4mm_P0.5mm.kicad_mod"),
    pins = {
        "SDA": _SDA,
        "SCL": _SCL,
        "AD0": _AD0,
        "FSYNC": FSYNC,
        "CLKIN": CLKIN,
        "NC": Net("NC"),
        "VLOGIC": VLOGIC,
        "GND": GND,
        "VDD": VDD,
        "RESV": _RESV,
        "INT": _INT,
        "AUX_DA": _AUX_DA,
        "AUX_CL": _AUX_CL,
        "CPOUT": _CPOUT,
        "REGOUT": _REGOUT
    },
)

# Power Supply Decoupling - VDD bypass capacitor
if add_decoupling:
    Capacitor(name = "C_VDD", value = "100nF", package = "0402", P1 = VDD, P2 = GND)

# VLOGIC Bypass Capacitor - Required for MPU-6050
if add_vlogic_cap:
    Capacitor(name = "C_VLOGIC", value = "10nF", package = "0402", P1 = VLOGIC, P2 = GND)

# Regulator Filter Capacitor - Required on REGOUT pin
if add_regout_cap:
    Capacitor(name = "C_REGOUT", value = "100nF", package = "0402", P1 = _REGOUT, P2 = GND)

# Charge Pump Capacitor - Required on CPOUT pin
if add_cpout_cap:
    Capacitor(name = "C_CPOUT", value = "2.2nF", package = "0402", P1 = _CPOUT, P2 = GND)

# I2C Pull-up Resistors - Required for proper I2C operation
if add_i2c_pullups:
    # Typical 4.7k pull-ups for I2C
    Resistor(name = "R_SDA", value = "4.7kohms", package = "0402", P1 = _SDA, P2 = VLOGIC)
    Resistor(name = "R_SCL", value = "4.7kohms", package = "0402", P1 = _SCL, P2 = VLOGIC)

# Interrupt pull-up resistor (optional)
if enable_interrupt:
    Resistor(name = "R_INT", value = "10kohms", package = "0402", P1 = INT, P2 = VLOGIC)

# pcb:sch C_CPOUT.C x=994.6800 y=341.9000 rot=0
# pcb:sch C_REGOUT.C x=893.0800 y=341.9000 rot=0
# pcb:sch C_VDD.C x=194.5800 y=214.9000 rot=0
# pcb:sch C_VLOGIC.C x=296.1800 y=214.9000 rot=0
# pcb:sch MPU-6050 x=507.0000 y=62.5000 rot=0
# pcb:sch R_INT.R x=1004.8400 y=62.5000 rot=180
# pcb:sch R_SCL.R x=357.1400 y=75.2000 rot=180
# pcb:sch R_SDA.R x=420.6400 y=75.2000 rot=180
# pcb:sch GND.1 x=672.1000 y=456.2000 rot=0
# pcb:sch VDD.1 x=677.1800 y=-1.0000 rot=0