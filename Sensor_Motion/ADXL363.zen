"""ADXL363 - Micropower 3-Axis Digital MEMS Accelerometer

The ADXL363 is an ultralow power, 3-axis MEMS accelerometer that consumes 
less than 2 μA at a 100 Hz output data rate and 270 nA when in motion-triggered 
wake-up mode. Unlike accelerometers that use power duty cycling to achieve low 
power consumption, the ADXL363 does not alias input signals by undersampling; 
it samples the full bandwidth of the sensor at all data rates.

The ADXL363 is available in a 3 mm × 3.25 mm × 1.06 mm package and features:
- ±2g, ±4g, ±8g measurement ranges
- 12-bit resolution at ±2g, ±4g ranges; 10-bit at ±8g
- Built-in motion detection with adjustable threshold
- SPI digital interface (3- and 4-wire)
- Temperature sensor
- Single/double tap detection
- Free-fall detection
- 32-sample FIFO to minimize host processor load

Author: @@anthropic/claude-opus-4
Reviewer: Nasheed Ur Rehman
Datasheet: https://www.analog.com/media/en/technical-documentation/data-sheets/ADXL363.pdf
"""

load("@stdlib/interfaces.zen", "Spi", "Power")

# Dependencies
Resistor = Module("@stdlib/generics/Resistor.zen")
Capacitor = Module("@stdlib/generics/Capacitor.zen")
TestPoint = Module("@stdlib/generics/TestPoint.zen")

# Types
MeasurementRange = enum("2g", "4g", "8g")
SpiMode = enum("3Wire", "4Wire")
InterruptPolarity = enum("ActiveHigh", "ActiveLow")
PowerMode = enum("Normal", "LowNoise", "UltraLowPower")

# Configuration
measurement_range = config("measurement_range", MeasurementRange, default = "2g")
spi_mode = config("spi_mode", SpiMode, default = "4Wire")
interrupt_polarity = config("interrupt_polarity", InterruptPolarity, default = "ActiveHigh")
power_mode = config("power_mode", PowerMode, default = "Normal")

# Power configuration
separate_vddio = config("separate_vddio", bool, default = True)

# Decoupling configuration
add_supply_decoupling = config("add_supply_decoupling", bool, default = True)
if separate_vddio:
    add_io_decoupling = config("add_io_decoupling", bool, default = True)
else:
    add_io_decoupling = config("add_io_decoupling", bool, default = False)
add_bulk_cap = config("add_bulk_cap", bool, default = True)

# Interrupt configuration
use_int1 = config("use_int1", bool, default = True)
use_int2 = config("use_int2", bool, default = True)
if use_int1 or use_int2:        
    add_interrupt_pullups = config("add_interrupt_pullups", bool, default = True)

# ADC input configuration
expose_adc_input = config("expose_adc_input", bool, default = False)
if expose_adc_input:
    add_adc_filter = config("add_adc_filter", bool, default = True)
else:
    add_adc_filter = config("add_adc_filter", bool, default = False)

# Test points
add_test_points = config("add_test_points", bool, default = False)

# External IO
VS = io("VS", Net, default = Net("VS", symbol = Symbol("@kicad-symbols/power.kicad_sym:VDD")))
if separate_vddio:
    VDD_IO = io("VDD_IO", Net, default = Net("VDD_IO", symbol = Symbol("@kicad-symbols/power.kicad_sym:VDD")))
else:
    VDD_IO = io("VDD_IO", Net, default = VS)
GND = io("GND", Net, default = Net("GND", symbol = Symbol("@kicad-symbols/power.kicad_sym:GND")))

# SPI interface
spi = io("SPI", Spi)

# Interrupt outputs (conditionally exposed)
if use_int1:
    INT1 = io("INT1", Net)
else:
    INT1 = Net("INT1_NC")

if use_int2:
    INT2 = io("INT2", Net)
else:
    INT2 = Net("INT2_NC")

# ADC input (conditionally exposed)
if expose_adc_input:
    ADC_IN = io("ADC_IN", Net)
else:
    ADC_IN = Net("ADC_IN_NC")

# Internal nets
_VS = VS
_VDD_IO = VDD_IO
_CS = spi.CS
_SCLK = spi.CLK
_MOSI = spi.MOSI
_MISO = spi.MISO if spi_mode == SpiMode("4Wire") else Net("MISO_NC")

# Reserved pins - directly connected per datasheet
# RESERVED1 (pin 6) must be connected to VS or left open
# RESERVED2 (pin 11) must be connected to GND or left open
_RES1 = GND
_RES2 = GND

# Micropower 3-Axis Accelerometer, Thermometer, 2/4/8g range, SPI, LGA-16
Component(
    name = "ADXL363",
    symbol = Symbol(library = "@kicad-symbols/Sensor_Motion.kicad_sym", name = "ADXL363"),
    footprint = File("@kicad-footprints/Sensor_Motion.pretty/Analog_LGA-16_3.25x3mm_P0.5mm_LayoutBorder3x5y.kicad_mod"),
    pins = {
        "ADC_IN": ADC_IN,
        "MOSI": _MOSI,
        "MISO": _MISO,
        "SCLK": _SCLK,
        "~{CS}": _CS,
        "RES": _RES1,
        "V_{S}": _VS,
        "GND": GND,
        "V_{DD_I/O}": _VDD_IO,
        "INT1": INT1,
        "INT2": INT2
    },
)

# Supply decoupling capacitors
if add_supply_decoupling:
    # VS decoupling - close to pin
    Capacitor(
        name = "C_VS",
        value = "100nF",
        voltage = "10V",
        package = "0402",
        P1 = _VS,
        P2 = GND
    )
    
    # Additional VS capacitor for low frequency noise
    Capacitor(
        name = "C_VS2",
        value = "1uF",
        voltage = "10V",
        package = "0603",
        P1 = _VS,
        P2 = GND
    )

# I/O voltage decoupling
if add_io_decoupling:
    # VDD_IO decoupling - close to pin
    Capacitor(
        name = "C_VDD_IO",
        value = "100nF",
        voltage = "6.3V",
        package = "0402",
        P1 = _VDD_IO,
        P2 = GND
    )

# Bulk capacitor for power supply
if add_bulk_cap:
    Capacitor(
        name = "C_BULK",
        value = "10uF",
        voltage = "10V",
        package = "0805",
        P1 = _VS,
        P2 = GND
    )

# Interrupt pull-up resistors
if add_interrupt_pullups:
    if use_int1:
        Resistor(
            name = "R_INT1",
            value = "10kohms",
            package = "0402",
            P1 = INT1,
            P2 = _VDD_IO
        )
    
    if use_int2:
        Resistor(
            name = "R_INT2",
            value = "10kohms",
            package = "0402",
            P1 = INT2,
            P2 = _VDD_IO
        )

# ADC input filter (if enabled)
if expose_adc_input and add_adc_filter:
    # RC low-pass filter for ADC input
    _ADC_FILTERED = Net("ADC_FILTERED")
    
    Resistor(
        name = "R_ADC",
        value = "1kohms",
        package = "0402",
        P1 = ADC_IN,
        P2 = _ADC_FILTERED
    )
    
    Capacitor(
        name = "C_ADC",
        value = "100nF",
        voltage = "6.3V",
        package = "0402",
        P1 = _ADC_FILTERED,
        P2 = GND
    )
    
    # Connect filtered signal to chip
    ADC_IN = _ADC_FILTERED

# CS pull-up resistor (ensures SPI mode when not actively driven)
Resistor(
    name = "R_CS",
    value = "100kohms",
    package = "0402",
    P1 = _CS,
    P2 = _VDD_IO
)

# Test points for debugging
if add_test_points:
    TestPoint(name = "TP_VS", variant = "Pad_D1.0mm", P1 = _VS)
    TestPoint(name = "TP_VDD_IO", variant = "Pad_D1.0mm", P1 = _VDD_IO)
    TestPoint(name = "TP_CS", variant = "Pad_D1.0mm", P1 = _CS)
    TestPoint(name = "TP_SCLK", variant = "Pad_D1.0mm", P1 = _SCLK)
    
    if use_int1:
        TestPoint(name = "TP_INT1", variant = "Pad_D1.0mm", P1 = INT1)
    
    if use_int2:
        TestPoint(name = "TP_INT2", variant = "Pad_D1.0mm", P1 = INT2)

# pcb:sch ADXL363 x=214.9000 y=49.8000 rot=0
# pcb:sch C_BULK.C x=1045.4800 y=126.0000 rot=0
# pcb:sch C_VDD_IO.C x=893.0800 y=126.0000 rot=0
# pcb:sch C_VS.C x=651.7800 y=126.0000 rot=0
# pcb:sch C_VS2.C x=778.7800 y=126.0000 rot=0
# pcb:sch R_CS.R x=90.4400 y=138.7000 rot=180
# pcb:sch R_INT1.R x=522.2400 y=87.9000 rot=180
# pcb:sch R_INT2.R x=585.7400 y=113.3000 rot=180
# pcb:sch GND.1 x=329.2000 y=367.3000 rot=0
# pcb:sch VDD_IO.1 x=385.0800 y=-26.4000 rot=0
# pcb:sch VS.1 x=334.2800 y=-39.1000 rot=0
# pcb:sch C_ADC.C x=-84.8200 y=138.7000 rot=0
# pcb:sch R_ADC.R x=26.9400 y=62.5000 rot=90
# pcb:sch TP_CS.TP x=42.1800 y=-54.3400 rot=0
# pcb:sch TP_INT1.TP x=499.3800 y=-117.8400 rot=0
# pcb:sch TP_INT2.TP x=562.8800 y=-117.8400 rot=0
# pcb:sch TP_SCLK.TP x=181.8800 y=250.4600 rot=180
# pcb:sch TP_VDD_IO.TP x=435.8800 y=-117.8400 rot=0
# pcb:sch TP_VS.TP x=359.6800 y=-117.8400 rot=0